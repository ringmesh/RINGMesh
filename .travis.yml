language: cpp
sudo: false

env:
  global:
    secure: Fo3r89wp9lKA2IoNAweBji9su5qmKhYrnkJ49Ci0VK1p6l4kM2CL5IF3aQvwweybtIacpxLZQN+XSrGZe21Mtc+tuG5OgJDg7R462sD9PHt+6bpJOcCx3c7Cw6U4ObKnbaF/2ybqoXk4uFfAISXHgJ9Og2+T+ouXgfou03sQHz/yY7bFjUFqX0VPRDNNvV9CZuP5CMoLUf/Lp6qhuS2V1q6qTMziQ+ga5Bv6/sMmetvSglrXH1wXG4cTF9ceBWknV6ql0cYnQGFp+uOQq4a8E3LA8zF75kkFim1BGlzhgZfWvCmdk20HgJRVfd8iqFmHwhV+Zm+9koqNo5C4T513LA1IxapCJ2H7kNWb77hJ/7JGfZO6Nk9yIp2YHQLtGn90NXisHhlSvZzNvtrewqjdS5NAsz3qxXYjKqdROYTSVD8QiGJZOTuZU8XnEivnj+MMSlFgsJ5ff0cZmMsbEJ9KPeaCW4r8wpVraEI9cCKaTC1jqyV6MSAV0THqdRzV7tI86ZyWYopCPntFbdd8+89yX7qNOBpwimJVfEbsUaPAo356o0Mjic//gbHbCd5JoOpCt7uBoOSpSX1tj8E63mc0EyLn9N/4z0YkfOKHoIrbN3Q1vDqX49M51vNjgo8sYiGelqQTbGl8lrnHGh3Vsub1MrvW+idpINAeZp8SN/REy28=

stages:
  - format
  - compile and test
  - name: deploy
    if: branch = master AND type = push
  - name: trigger
    if: branch = master AND type IN (push, api)

cache:
  directories:
    - node_modules

jobs:
  include:
    - stage: format
      if: branch != master
      os: linux
      env:
        - TEST="Clang format"
      script:
        - mkdir build
        - cd build
        - cmake ..
        - make format
        - |
          if [[ -n $(git diff) ]]; then
            echo "Format requirement is not satisfied"
            return 1
          fi
      after_failure:
        - export head_ref=$(git rev-parse HEAD)
        - export branch_ref=$(git rev-parse "$TRAVIS_BRANCH")
        - |
          if [[ $head_ref != $branch_ref ]]; then
            echo "HEAD ref ($head_ref) does not match $TRAVIS_BRANCH ref ($branch_ref)"
            return 1
          fi
        - git checkout "$TRAVIS_BRANCH"
        - git add --all "$TRAVIS_BUILD_DIR"
        - git commit -m "Travis CI format update"
        - git push https://BotellaA:$GITHUB_TOKEN@github.com/$TRAVIS_REPO_SLUG "$TRAVIS_BRANCH"

    - stage: compile and test
      os: linux
      env:
        - TEST="Gcc Check"
      apt:
          packages:
            - libxrandr-dev
            - libxinerama-dev
            - libxcursor-dev
            - libxi-dev
      script:
        - mkdir build
        - cd build
        - CXX=g++ CC=gcc cmake -DCMAKE_BUILD_TYPE=Coverage -DRINGMESH_WITH_GRAPHICS:BOOL=OFF -DRINGMESH_WITH_UTILITIES:BOOL=ON -DRINGMESH_WITH_TESTS:BOOL=ON -DRINGMESH_WITH_TUTORIALS:BOOL=ON -DRINGMESH_WITH_RESQML2:BOOL=OFF ..
        - cmake --build . -- -j2
        - cmake -E env CTEST_OUTPUT_ON_FAILURE=1 cmake --build . --target coverage -- -j2
        - cmake --build . --target package
        - cd $TRAVIS_BUILD_DIR
      after_failure:
        - if [ "$TRAVIS_BRANCH" = "master" && "$TRAVIS_EVENT_TYPE" != "pull_request" ]; then 
          cd $TRAVIS_BUILD_DIR;
          bash ./travis_slack_notif.sh "$TRAVIS_JOB_ID" "$TRAVIS_BRANCH"; fi

    - stage: compile and test
      os: linux
      env:
        - TEST="Clang Check"
      addons:
        apt:
          packages:
            - libxrandr-dev
            - libxinerama-dev
            - libxcursor-dev
            - libxi-dev
      script:
        - mkdir build
        - cd build
        - CXX=clang++ CC=clang cmake -DCMAKE_BUILD_TYPE=DEBUG -DRINGMESH_WITH_GRAPHICS:BOOL=OFF -DRINGMESH_WITH_UTILITIES:BOOL=ON -DRINGMESH_WITH_TESTS:BOOL=ON -DRINGMESH_WITH_TUTORIALS:BOOL=ON -DRINGMESH_WITH_RESQML2:BOOL=ON ..
        - cmake --build . -- -j2
        - cmake -E env CTEST_OUTPUT_ON_FAILURE=1 cmake --build . --target test -- -j2
        - cmake --build . --target package
      after_failure:
        - if [ "$TRAVIS_BRANCH" = "master" && "$TRAVIS_EVENT_TYPE" != "pull_request" ]; then 
          cd $TRAVIS_BUILD_DIR;
          bash ./travis_slack_notif.sh "$TRAVIS_JOB_ID" "$TRAVIS_BRANCH"; fi

    - stage: compile and test
      if: branch = master
      os: osx
      env:
        - TEST="Xcode Check"
      script:
        - mkdir build
        - cd build
        - CXX=clang++ CC=clang cmake -G Xcode -DRINGMESH_WITH_GRAPHICS:BOOL=OFF -DRINGMESH_WITH_UTILITIES:BOOL=ON -DRINGMESH_WITH_TESTS:BOOL=ON -DRINGMESH_WITH_TUTORIALS:BOOL=ON -DRINGMESH_WITH_RESQML2:BOOL=OFF ..
        - cmake --build . --config Debug
        - cmake -E env CTEST_OUTPUT_ON_FAILURE=1 cmake --build . --target RUN_TESTS --config Debug
        - cmake --build . --target package
      after_failure:
        - if [ "$TRAVIS_BRANCH" = "master" && "$TRAVIS_EVENT_TYPE" != "pull_request" ]; then 
          cd $TRAVIS_BUILD_DIR;
          bash ./travis_slack_notif.sh "$TRAVIS_JOB_ID" "$TRAVIS_BRANCH"; fi

    - stage: compile and test
      if: branch = master
      os: osx
      env:
        - TEST="Unix Makefile Check"
      script:
        - mkdir build
        - cd build
        - CXX=clang++ CC=clang cmake -DCMAKE_BUILD_TYPE=DEBUG -DRINGMESH_WITH_GRAPHICS:BOOL=OFF -DRINGMESH_WITH_UTILITIES:BOOL=ON -DRINGMESH_WITH_TESTS:BOOL=ON -DRINGMESH_WITH_TUTORIALS:BOOL=ON -DRINGMESH_WITH_RESQML2:BOOL=OFF ..
        - cmake --build . -- -j2
        - cmake -E env CTEST_OUTPUT_ON_FAILURE=1 cmake --build . --target test -- -j2
        - cmake --build . --target package
      after_failure:
        - if [ "$TRAVIS_BRANCH" = "master" && "$TRAVIS_EVENT_TYPE" != "pull_request" ]; then 
          cd $TRAVIS_BUILD_DIR;
          bash ./travis_slack_notif.sh "$TRAVIS_JOB_ID" "$TRAVIS_BRANCH"; fi

    - stage: deploy
      os: linux
      env:
        - RINGMESH_PACKAGE=RINGMesh-master-Linux
      addons:
        apt:
          packages:
            - libxrandr-dev
            - libxinerama-dev
            - libxcursor-dev
            - libxi-dev
      script:
        - mkdir build
        - cd build
        - CXX=g++ CC=gcc cmake -DCMAKE_BUILD_TYPE=RELEASE -DRINGMESH_WITH_GRAPHICS:BOOL=OFF -DRINGMESH_WITH_UTILITIES:BOOL=ON -DRINGMESH_WITH_RESQML2:BOOL=ON -DCPACK_PACKAGE_FILE_NAME:STRING=$RINGMESH_PACKAGE ..
        - cmake --build . -- -j2
        - cmake --build . --target package
      after_success:
        - git clone -b master https://github.com/ringmesh/web
        - cd web
        - mkdir -p download
        - cp -f ringmesh/$RINGMESH_PACKAGE.tar.gz download/
        - git add download/$RINGMESH_PACKAGE.tar.gz
        - git commit -m "Update Linux master release"
        - git push https://BotellaA:$GITHUB_TOKEN@github.com/ringmesh/web master
      after_failure:
        - if [ "$TRAVIS_BRANCH" = "master" && "$TRAVIS_EVENT_TYPE" != "pull_request" ]; then 
          cd $TRAVIS_BUILD_DIR;
          ./travis_slack_notif.sh "$TRAVIS_JOB_ID" "$TRAVIS_BRANCH"; fi

    - stage: deploy
      os: osx
      env:
        - RINGMESH_PACKAGE=RINGMesh-master-Darwin
      script:
        - mkdir build
        - cd build
        - CXX=clang++ CC=clang cmake -DCMAKE_BUILD_TYPE=RELEASE -DRINGMESH_WITH_GRAPHICS:BOOL=OFF -DRINGMESH_WITH_UTILITIES:BOOL=ON -DRINGMESH_WITH_RESQML2:BOOL=OFF -DCPACK_PACKAGE_FILE_NAME:STRING=$RINGMESH_PACKAGE ..
        - cmake --build . -- -j2
        - cmake --build . --target package
      after_success:
        - git clone -b master https://github.com/ringmesh/web
        - cd web
        - mkdir -p download
        - cp -f ../ringmesh/$RINGMESH_PACKAGE.tar.gz download/
        - git add download/$RINGMESH_PACKAGE.tar.gz
        - git commit -m "Update Darwin master release"
        - git push https://BotellaA:$GITHUB_TOKEN@github.com/ringmesh/web master
      after_failure:
        - if [ "$TRAVIS_BRANCH" = "master" && "$TRAVIS_EVENT_TYPE" != "pull_request" ]; then 
          cd $TRAVIS_BUILD_DIR;
          bash ./travis_slack_notif.sh "$TRAVIS_JOB_ID" "$TRAVIS_BRANCH"; fi

    - stage: trigger
      os: linux
      script:
        - git clone -b master https://github.com/ringmesh/TriggerCI
        - cd TriggerCI
        - python travis-trigger.py RINGMesh
    
