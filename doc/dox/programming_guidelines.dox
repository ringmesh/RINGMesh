/*
 * Copyright (c) 2012-2016, Association Scientifique pour la Geologie et ses Applications (ASGA)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the <organization> nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *     http://www.ring-team.org
 *
 *     RING Project
 *     Ecole Nationale Superieure de Geologie - GeoRessources
 *     2 Rue du Doyen Marcel Roubault - TSA 70605
 *     54518 VANDOEUVRE-LES-NANCY
 *     FRANCE
 */


/**

\page ringmesh_programming_guidelines RINGMesh Programming Guidelines

\section style Style and naming conventions

\subsection stylec Style conventions

\li Indentations are 4 space characters (avoid tabulation)
\li Opening brackets are at the end of the opening block (for, while if...) with a blank space before
\li Closing brackets are at the same level as opening block instruction. Then, go to line for beginning a new block. Exception for the closing bracket of "else" 
\li Always open a new block after if, for... 
\li Space after '(' and before ')'
\li No space after '[' and before ']'
\li Space after '<' and before '>' for templates
\li Space after ',' and ';' 
\li Space before ';' at the end of an instruction
\li Space after and before mathematic operators and comparators (<, >, =, <=, ==, !=, * , +, -, /, ...)
\li No particular rules for blank lines. Please make your code readable.
\li No more than 85 characters per line. If longer, go to next line and add an indentation (4 characters)

Sample code:

\code
for( index_t i = 0; i < N; i++ ) {
    double a = 0 ;

    if( a < 0. ) {
        double b = 6 ;
        my_function( a, b ) ;
        std::vector< double > c( 6 ) ;
        double& d = c[2] ; 
    } else {
        // other instructions
    }
}
\endcode

\subsection Naming Conventions

\li Use English words to name classes, functions, variables etc.
\li Abbreviations and acronyms are minimized
\li Each word of Class and NameSpace names is capitalized 
\li Function and local variables names are lowercase
\li Member variables names are lowercase

Sample code:

\code
namespace RINGMesh {

    namespace MatrixUtils {
        
        class DiagonalMatrix: public Matrix {
        
        public:
            DiagonalMatrix() ;
            void compute_trace() ;

        private:
            double trace_ ;
        } ;
    }
}
\endcode

\subsection doc Documentation

\li Write comments in English 
\li Document all classes, functions and variables in doxygen-readable format, preferably in .h files
\li Use // or ///, in implementation comments

\code
/*exclamationMark
 * @brief add a to b l
 * @details more detailed description if needed
 * @param[in] a the value to be added to \p b ;
 * @param[in,out] b the value that will be modified
 */
void add( int a, double& b )
{
    // a commentary
    b += a ;
}
\endcode

\section functions Writing Functions

\subsection philofunc Philosophy

\li A function should perform a single logical operation
\li Keep functions short and simple (less than 10 lines)
\li Prefer pure functions i.e. functions that does not depend on anything else and have no side-effects
\li Use the macro RINGMESH_API if you want your function to be imported in the windows library

\subsection paramfunc Parameters

\li For "in" parameters, pass cheaply copied types by value and others by reference to const
\li For "in-out" parameters, pass by reference to non-const
\li "in" parameters appear before "out" parameters

\subsection funcstyle Style
\li If all the parameters does not fit in the line, write them down in a new line
\li The '{" is opened next line. The instructions are written next line. '}'is placed in a new line too.

Sample Code

\code

void RINGMESH_API compute_next_border_on_surface(
    const Surface& surface,
    const Border& from_border,
    Border& next_border )
{
    // instructions
}
\endcode


\subsection returnfunc Return values

\li Never (directly or indirectly) return a pointer to a local object


\section classes Writing Classes 

\subsection classphilo Philosophy

\li Declare a member function that does not modify the state of its object const
\li Define a destructor if a class needs an explicit action at object destruction
\li Be careful, a lot of class have to forbid copy, using
\li Use the macro RINGMESH_API if you want your class to be imported in the windows library

\subsection classstyle Style

\li You have to follow the order: public: protected: private: for methods and then again public: protected: private: data members
\li Always put a "_" at the end of the data member names
\li There are no particular rules for blank lines, it is the developer responsibility to make its code clear and well readable

Sample code:

\code

class RINGMesh_API MyClass {
public:
    MyClass() ;
    void compute_a_thing() ;
   
public:
    int attribute_a_ ;

protected:
    double compute_another_thing() ;

protected:
    double attribute_b_ ;
   
private:
    void compute_another_thing_just_for_me() const ;

private:
    std::vector< double > vector_of_things_ ;
} ;

\endcode



\section sourcefile Source Files

\li Use a .cpp suffix for code files and .h for interface files.
\li Include first third party headers , then RINGMesh Headers
\li Configure CMake in order to use < > instead of " "
\li Avoid cyclic dependencies among source files
\li Corollary: minimize number of #include in .h files (use forward declarations instead)

Sample code:

\code
// Use this
#include <ringmesh/geo_model_mesh.h>

// DO NOT use this
#include <../../include/ringmesh/geo_model_mesh.h>
\endcode


*/

