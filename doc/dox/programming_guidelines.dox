/*
 * Copyright (c) 2012-2015, Association Scientifique pour la Geologie et ses Applications (ASGA)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the <organization> nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *  Contacts:
 *     Arnaud.Botella@univ-lorraine.fr
 *     Antoine.Mazuyer@univ-lorraine.fr
 *     Jeanne.Pellerin@wias-berlin.de
 *
 *     http://www.ring-team.org
 *
 *     RING Project
 *     Ecole Nationale Superieure de Geologie - GeoRessources
 *     2 Rue du Doyen Marcel Roubault - TSA 70605
 *     54518 VANDOEUVRE-LES-NANCY
 *     FRANCE
 */


/**

\page ringmesh_programming_guidelines RINGMesh Programming Guidelines
\section Programming Guidelines for RINGMesh

\subsection Style Conventions

\li Identations are 4 space characters (avoid tabulation)
\li Opening brackets are at the end of the opening block (for, while if...) with a blank space before
\li Closing brackets are at the same level as opening block instruction. Then, go to line for beginning a new block. Exception for the closing bracket of "else" 
\li It is forbidden to write an instruction juste after an if, for... without '{ }'
\li Space after '(' and before ')' 
\li Space afer ',' and ';' 
\li Space before ';' at the end of an instruction
\li Space after and before mathematic operators and comparators (<, >, =, <=, ==...)
\li Space after '<' and before '>' for templates
\li No particular rules for blank lines. Please make your code readable.

Sample code:

\code
for( index_t i = 0; i < N; i++ ) {
    double a = 0 ;

    if( a < 0. ) {
        double b = 6 ;
        my_function( a, b ) ;
        std::vector< double > c( 6 ) ;
    } else {
        // other intruction
    }
}
\endcode

\subsection Naming Conventions

\li Use english names 
\li Abbreviations and acronyms are minimized
\li Each word of Class and NameSpace names is capitalized 
\li Function and local variables names are lowercase
\li Member variables names are lowercase

Sample code:

\code
namespace RINGMesh {

    namespace MatrixUtils {
        
        class DiagonalMatrix: public Matrix {
        
        public:
            DiagonalMatrix() ;
            void compute_trace() ;

        private:
            double trace_ ;
        } ;
    }
}
\endcode

\subsection Documentation

\li Write comments in English 
\li Document all classes, functions and variables in doxygen-readable format, preferably in .h files
\li Use // or ///, in implementation comments

\code
/*exclamationMark
 * @brief add a to b l
 * @details more detailed description if needed
 * @param[in] a the value to be added to \p b ;
 * @param[in,out] b the value that will be modified
 */
void add(int a, double& b) {
    // a commentary
    b += a ;
}
\endcode

\subsection Writing Functions

\subsubsection Philosophy

\li A function should perform a single logical operation
\li Keep functions short and simple
\li Prefer pure functions i.e. functions that does not depend on anything else and have no side-effects

\subsubsection Parameters

\li For "in" parameters, pass cheaply copied types by value and others by reference to const
\li For "in-out" parameters, pass by reference to non-const


\subsubsection Return values

\li Never (directly or indirectly) return a pointer to a local object


\subsection Writing Classes 

\subsubsection Philosophy

\li Declare a member function that does not modify the state of its object const






*/

