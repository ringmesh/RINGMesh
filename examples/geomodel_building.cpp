/*
 * Copyright (c) 2012-2016, Association Scientifique pour la Geologie et ses Applications (ASGA)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of ASGA nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL ASGA BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *     http://www.ring-team.org
 *
 *     RING Project
 *     Ecole Nationale Superieure de Geologie - GeoRessources
 *     2 Rue du Doyen Marcel Roubault - TSA 70605
 *     54518 VANDOEUVRE-LES-NANCY
 *     FRANCE
 */

#include <ringmesh/basic/common.h>

#include <geogram/basic/command_line.h>
#include <geogram/basic/stopwatch.h>

#include <ringmesh/basic/command_line.h>
#include <ringmesh/geomodel/geo_model.h>
#include <ringmesh/geomodel/geo_model_builder.h>

#include <ringmesh/geomodel/geo_model_api.h>
#include <ringmesh/io/io.h>

/*!
 * @author Antoine Mazuyer
 * @author Francois Bonneau
 * @author Pierre Anquez
 */

/*!
 * Purpose of this main is to show the methods
 * to be used to build a GeoModel from scratch.
 *
 *
 *  !!!!!!!!!!!!!!!!!! WARNING !!!!!!!!!!!!!!!!!!!!!!!!!
 *  !!   This is the brute force way to build a       !!
 *  !!   GeoModel, as you will see, the code is       !!
 *  !!   pretty heavy. Purpose of this main is to     !!
 *  !!   present the method to build a GeoModel, and  !!
 *  !!   to understand the relations between each     !!
 *  !!   GeoModelEntities. One can implement loop     !!
 *  !!   to automate these actions by reading         !!
 *  !!   a file containing all the informations.      !!
 *  !!   That is what is done for instance, when      !!
 *  !!   RINGMesh reads a .ml file generated by       !!
 *  !!   Gocad                                        !!
 *  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 *
 * We will take the example of a very simple model with one horizon
 *
 *        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 *       @                                                 @@
 *      @                                                 @ @
 *     @                                                 @  @
 *    @                                                 @   @
 *   @                                                 @    @
 *  @                                                 @    %@
 * @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    % @
 * @                                                 @   %  @
 * @                                                 @  %   @
 * @                                                 @ %    @
 * @                                                 @%    @
 * @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@    @
 * @                                                 @   @
 * @                                                 @  @
 * @                                                 @ @
 * @                                                 @@
 * @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
 *
 * @ : the boundaries
 * % : the horizons
 *
 *
 */

int main( int argc, char** argv )
{
    using namespace RINGMesh ;

    try {

        // This three lines stands for the initialization
        // of Geogram and the factories of RINGMesh
        // There are MANDATORY
        GEO::initialize() ;
        configure_geogram() ;
        configure_ringmesh() ;

        // Say Hello
        Logger::div( "RINGMesh Training" ) ;
        Logger::out( "" ) << "Welcome to the training of RINGMesh ! !" << std::endl ;

        // Measure the time between the GEO::Stopwatch creation and its destruction.
        GEO::Stopwatch total( "Total time" ) ;

        // We instantiate the class GeoModel
        GeoModel geomodel ;

        // To build the model, we have to use the class
        // GeoModelBuilder, which is a safety for the user
        // Indeed, the GeoModel can't be directly modified,
        // It has to be done using the GeoModelBuilder
        GeoModelBuilder geomodel_builder( geomodel ) ;

        //#############################
        // Declaration of the Entities#
        //#############################

        // For the next section, read the documentation to understand
        // the concept of Geological Entity and Mesh Entities
        // Let's to a sum up of the GeoModel we try to build:
        // For the Geological Entities (handle by the class GeoModelGeologicalEntity):
        // 16 Contacts
        index_t nb_contacts = 16 ;
        // 1 horizons + 6 boundaries = 7 Interfaces
        index_t nb_interfaces = 7 ;
        // 2 Layers
        index_t nb_layers = 2 ;

        // For the Meshed Entities, (handle by the class GeoModelMeshEntity)
        // 12 Corners
        index_t nb_corners = 12 ;
        // 20 Lines
        index_t nb_lines = 20 ;
        // 11 Surfaces
        index_t nb_surfaces = 11 ;
        // 2  Regions
        index_t nb_regions = 2 ;

        //We first create the GeoModelGeoglogicalEntity
        // Create the contacts
        for( index_t contact = 0; contact < nb_contacts; contact++ ) {
            geomodel_builder.create_geological_entity(
                Contact::type_name_static() ) ;
            // the static method type_name_static() is available for each
            // GeoModelEntity. It returns an EntityType which is a string
            // corresponding to the Type of the entity.
        }

        // Create the Interfaces
        for( index_t interface_itr = 0; interface_itr < nb_interfaces; interface_itr++ ) {
            geomodel_builder.create_geological_entity(
                Interface::type_name_static() ) ;
        }

        // Create the Layers
        for( index_t layer = 0; layer < nb_layers; layer++ ) {
            geomodel_builder.create_geological_entity( Layer::type_name_static() ) ;
        }

        // Then we create the GeoModelMEshEntity
        // Create the Corners
        for( index_t corner = 0; corner < nb_corners; corner++ ) {
            geomodel_builder.create_mesh_entity< Corner >() ;
        }

        // Create the Lines
        for( index_t lines = 0; lines < nb_lines; lines++ ) {
            geomodel_builder.create_mesh_entity< Line >() ;
        }

        // Create the Surfaces
        for( index_t surface = 0; surface < nb_surfaces; surface++ ) {
            geomodel_builder.create_mesh_entity< Surface >() ;

        }

        // Create the Regions
        for( index_t region = 0; region < nb_regions; region++ ) {
            geomodel_builder.create_mesh_entity< Region >() ;
        }

        //#############################
        // Setting the Geometry       #
        //#############################

        //We declare the coordinates of the corners. We arrange the corner in a
        // table
        vec3 corners_table[12] ;
        corners_table[0] = vec3( 0, 0, 0 ) ;
        corners_table[1] = vec3( 5, 0, 0 ) ;
        corners_table[2] = vec3( 5, 5, 0 ) ;
        corners_table[3] = vec3( 0, 5, 0 ) ;
        corners_table[4] = vec3( 0, 0, -2 ) ;
        corners_table[5] = vec3( 5, 0, -2 ) ;
        corners_table[6] = vec3( 5, 5, -2 ) ;
        corners_table[7] = vec3( 0, 5, -2 ) ;
        corners_table[8] = vec3( 0, 0, -1 ) ;
        corners_table[9] = vec3( 5, 0, -1 ) ;
        corners_table[10] = vec3( 5, 5, -1 ) ;
        corners_table[11] = vec3( 0, 5, -1 ) ;

        // We associate the coordinates with the corners
        for( index_t corner = 0; corner < nb_corners; corner++ ) {
            geomodel_builder.set_corner( corner, corners_table[corner] ) ;
        }

        // We associate the coordinates with the lines
        // We create a vector cur_coor_line containing the 2 vertices
        // for each line. Of course, you can have more vertices in a Line
        std::vector< vec3 > cur_coor_line( 2 ) ;
        cur_coor_line[0] = corners_table[0] ;
        cur_coor_line[1] = corners_table[3] ;
        geomodel_builder.set_line( 0, cur_coor_line ) ;

        cur_coor_line[0] = corners_table[2] ;
        cur_coor_line[1] = corners_table[3] ;
        geomodel_builder.set_line( 1, cur_coor_line ) ;

        cur_coor_line[0] = corners_table[1] ;
        cur_coor_line[1] = corners_table[2] ;
        geomodel_builder.set_line( 2, cur_coor_line ) ;

        cur_coor_line[0] = corners_table[0] ;
        cur_coor_line[1] = corners_table[1] ;
        geomodel_builder.set_line( 3, cur_coor_line ) ;

        cur_coor_line[0] = corners_table[8] ;
        cur_coor_line[1] = corners_table[11] ;
        geomodel_builder.set_line( 4, cur_coor_line ) ;

        cur_coor_line[0] = corners_table[10] ;
        cur_coor_line[1] = corners_table[11] ;
        geomodel_builder.set_line( 5, cur_coor_line ) ;

        cur_coor_line[0] = corners_table[9] ;
        cur_coor_line[1] = corners_table[10] ;
        geomodel_builder.set_line( 6, cur_coor_line ) ;

        cur_coor_line[0] = corners_table[8] ;
        cur_coor_line[1] = corners_table[9] ;
        geomodel_builder.set_line( 7, cur_coor_line ) ;

        cur_coor_line[0] = corners_table[4] ;
        cur_coor_line[1] = corners_table[7] ;
        geomodel_builder.set_line( 8, cur_coor_line ) ;

        cur_coor_line[0] = corners_table[6] ;
        cur_coor_line[1] = corners_table[7] ;
        geomodel_builder.set_line( 9, cur_coor_line ) ;

        cur_coor_line[0] = corners_table[5] ;
        cur_coor_line[1] = corners_table[6] ;
        geomodel_builder.set_line( 10, cur_coor_line ) ;

        cur_coor_line[0] = corners_table[4] ;
        cur_coor_line[1] = corners_table[5] ;
        geomodel_builder.set_line( 11, cur_coor_line ) ;

        cur_coor_line[0] = corners_table[4] ;
        cur_coor_line[1] = corners_table[8] ;
        geomodel_builder.set_line( 12, cur_coor_line ) ;

        cur_coor_line[0] = corners_table[0] ;
        cur_coor_line[1] = corners_table[8] ;
        geomodel_builder.set_line( 13, cur_coor_line ) ;

        cur_coor_line[0] = corners_table[7] ;
        cur_coor_line[1] = corners_table[11] ;
        geomodel_builder.set_line( 14, cur_coor_line ) ;

        cur_coor_line[0] = corners_table[3] ;
        cur_coor_line[1] = corners_table[11] ;
        geomodel_builder.set_line( 15, cur_coor_line ) ;

        cur_coor_line[0] = corners_table[5] ;
        cur_coor_line[1] = corners_table[9] ;
        geomodel_builder.set_line( 16, cur_coor_line ) ;

        cur_coor_line[0] = corners_table[1] ;
        cur_coor_line[1] = corners_table[9] ;
        geomodel_builder.set_line( 17, cur_coor_line ) ;

        cur_coor_line[0] = corners_table[6] ;
        cur_coor_line[1] = corners_table[10] ;
        geomodel_builder.set_line( 18, cur_coor_line ) ;

        cur_coor_line[0] = corners_table[2] ;
        cur_coor_line[1] = corners_table[10] ;
        geomodel_builder.set_line( 19, cur_coor_line ) ;

        // We associate the coordinates with the Surfaces
        // We create a vector cur_coor_surface containing 4 vertices.
        // These 4 vertices delimits each surface so each surface
        // will contain one unique quad as a facet.
        // You can defined a more conplicated mesh (for example a
        // triangular mesh) with these methods.
        std::vector< index_t > facet( 4, 0 ) ;
        facet[0] = 0 ;
        facet[1] = 1 ;
        facet[2] = 2 ;
        facet[3] = 3 ;
        std::vector< index_t > facet_ptr( 2 ) ;
        facet_ptr[0] = 0 ;
        facet_ptr[1] = 4 ;
        std::vector< vec3 > cur_coor_surface( 4 ) ;
        cur_coor_surface[0] = corners_table[0] ;
        cur_coor_surface[1] = corners_table[1] ;
        cur_coor_surface[2] = corners_table[2] ;
        cur_coor_surface[3] = corners_table[3] ;
        geomodel_builder.set_surface_geometry( 0, cur_coor_surface, facet,
            facet_ptr ) ;

        cur_coor_surface[0] = corners_table[8] ;
        cur_coor_surface[1] = corners_table[9] ;
        cur_coor_surface[2] = corners_table[10] ;
        cur_coor_surface[3] = corners_table[11] ;
        geomodel_builder.set_surface_geometry( 1, cur_coor_surface, facet,
            facet_ptr ) ;

        cur_coor_surface[0] = corners_table[4] ;
        cur_coor_surface[1] = corners_table[5] ;
        cur_coor_surface[2] = corners_table[6] ;
        cur_coor_surface[3] = corners_table[7] ;
        geomodel_builder.set_surface_geometry( 2, cur_coor_surface, facet,
            facet_ptr ) ;

        cur_coor_surface[0] = corners_table[8] ;
        cur_coor_surface[1] = corners_table[4] ;
        cur_coor_surface[2] = corners_table[7] ;
        cur_coor_surface[3] = corners_table[11] ;
        geomodel_builder.set_surface_geometry( 3, cur_coor_surface, facet,
            facet_ptr ) ;

        cur_coor_surface[0] = corners_table[0] ;
        cur_coor_surface[1] = corners_table[8] ;
        cur_coor_surface[2] = corners_table[11] ;
        cur_coor_surface[3] = corners_table[3] ;
        geomodel_builder.set_surface_geometry( 4, cur_coor_surface, facet,
            facet_ptr ) ;

        cur_coor_surface[0] = corners_table[5] ;
        cur_coor_surface[1] = corners_table[6] ;
        cur_coor_surface[2] = corners_table[10] ;
        cur_coor_surface[3] = corners_table[9] ;
        geomodel_builder.set_surface_geometry( 5, cur_coor_surface, facet,
            facet_ptr ) ;

        cur_coor_surface[0] = corners_table[9] ;
        cur_coor_surface[1] = corners_table[10] ;
        cur_coor_surface[2] = corners_table[2] ;
        cur_coor_surface[3] = corners_table[1] ;
        geomodel_builder.set_surface_geometry( 6, cur_coor_surface, facet,
            facet_ptr ) ;

        cur_coor_surface[0] = corners_table[8] ;
        cur_coor_surface[1] = corners_table[4] ;
        cur_coor_surface[2] = corners_table[5] ;
        cur_coor_surface[3] = corners_table[9] ;
        geomodel_builder.set_surface_geometry( 7, cur_coor_surface, facet,
            facet_ptr ) ;

        cur_coor_surface[0] = corners_table[0] ;
        cur_coor_surface[1] = corners_table[8] ;
        cur_coor_surface[2] = corners_table[9] ;
        cur_coor_surface[3] = corners_table[1] ;
        geomodel_builder.set_surface_geometry( 8, cur_coor_surface, facet,
            facet_ptr ) ;

        cur_coor_surface[0] = corners_table[6] ;
        cur_coor_surface[1] = corners_table[10] ;
        cur_coor_surface[2] = corners_table[11] ;
        cur_coor_surface[3] = corners_table[7] ;
        geomodel_builder.set_surface_geometry( 9, cur_coor_surface, facet,
            facet_ptr ) ;

        cur_coor_surface[0] = corners_table[10] ;
        cur_coor_surface[1] = corners_table[2] ;
        cur_coor_surface[2] = corners_table[3] ;
        cur_coor_surface[3] = corners_table[11] ;
        geomodel_builder.set_surface_geometry( 10, cur_coor_surface, facet,
            facet_ptr ) ;

        //###################################
        // Setting the Boundaries relations #
        //###################################

        //We set the Corners which are in boundary of the lines
        // The add_mesh_entity_in_boundary method take as first argument the
        // gme_t of the boundary and in second argument
        // the id of the GeoModelMeshentity bounded by the boundary
        // Remember :
        // Lines are bounded by Corners
        // Surfaces are bounded by Lines
        // Region are bounded by Surfaces
        // For corner 0
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Corner::type_name_static(), 0 ), 0 ) ;
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Corner::type_name_static(), 0 ), 13 ) ;
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Corner::type_name_static(), 0 ), 3 ) ;

        // For corner 1
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Corner::type_name_static(), 1 ), 2 ) ;
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Corner::type_name_static(), 1 ), 3 ) ;
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Corner::type_name_static(), 1 ), 17 ) ;

        // For corner 2
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Corner::type_name_static(), 2 ), 2 ) ;
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Corner::type_name_static(), 2 ), 19 ) ;
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Corner::type_name_static(), 2 ), 1 ) ;

        // For corner 3
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Corner::type_name_static(), 3 ), 0 ) ;
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Corner::type_name_static(), 3 ), 1 ) ;
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Corner::type_name_static(), 3 ), 15 ) ;

        // For corner 4
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Corner::type_name_static(), 4 ), 12 ) ;
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Corner::type_name_static(), 4 ), 8 ) ;
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Corner::type_name_static(), 4 ), 11 ) ;

        // For corner 5
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Corner::type_name_static(), 5 ), 10 ) ;
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Corner::type_name_static(), 5 ), 16 ) ;
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Corner::type_name_static(), 5 ), 11 ) ;

        // For corner 6
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Corner::type_name_static(), 6 ), 10 ) ;
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Corner::type_name_static(), 6 ), 18 ) ;
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Corner::type_name_static(), 6 ), 9 ) ;

        // For corner 7
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Corner::type_name_static(), 7 ), 8 ) ;
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Corner::type_name_static(), 7 ), 9 ) ;
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Corner::type_name_static(), 7 ), 14 ) ;

        // For corner 8
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Corner::type_name_static(), 8 ), 12 ) ;
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Corner::type_name_static(), 8 ), 13 ) ;
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Corner::type_name_static(), 8 ), 7 ) ;
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Corner::type_name_static(), 8 ), 4 ) ;

        // For corner 9
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Corner::type_name_static(), 9 ), 16 ) ;
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Corner::type_name_static(), 9 ), 17 ) ;
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Corner::type_name_static(), 9 ), 6 ) ;
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Corner::type_name_static(), 9 ), 7 ) ;

        // For corner 10
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Corner::type_name_static(), 10 ), 6 ) ;
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Corner::type_name_static(), 10 ), 18 ) ;
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Corner::type_name_static(), 10 ), 19 ) ;
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Corner::type_name_static(), 10 ), 5 ) ;

        // For corner 11
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Corner::type_name_static(), 11 ), 4 ) ;
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Corner::type_name_static(), 11 ), 14 ) ;
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Corner::type_name_static(), 11 ), 15 ) ;
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Corner::type_name_static(), 11 ), 5 ) ;

        /////////////////////////////////////////////////////////

        // For line 0
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Line::type_name_static(), 0 ), 0 ) ;
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Line::type_name_static(), 0 ), 4 ) ;

        // For line 1
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Line::type_name_static(), 1 ), 0 ) ;
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Line::type_name_static(), 1 ), 10 ) ;

        // For line 2
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Line::type_name_static(), 2 ), 0 ) ;
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Line::type_name_static(), 2 ), 6 ) ;

        // For line 3
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Line::type_name_static(), 3 ), 0 ) ;
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Line::type_name_static(), 3 ), 8 ) ;

        // For line 4
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Line::type_name_static(), 4 ), 1 ) ;
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Line::type_name_static(), 4 ), 4 ) ;
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Line::type_name_static(), 4 ), 3 ) ;

        // For line 5
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Line::type_name_static(), 5 ), 1 ) ;
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Line::type_name_static(), 5 ), 9 ) ;
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Line::type_name_static(), 5 ), 10 ) ;

        // For line 6
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Line::type_name_static(), 6 ), 1 ) ;
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Line::type_name_static(), 6 ), 6 ) ;
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Line::type_name_static(), 6 ), 5 ) ;

        // For line 7
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Line::type_name_static(), 7 ), 1 ) ;
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Line::type_name_static(), 7 ), 7 ) ;
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Line::type_name_static(), 7 ), 8 ) ;

        // For line 8
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Line::type_name_static(), 8 ), 2 ) ;
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Line::type_name_static(), 8 ), 3 ) ;

        // For line 9
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Line::type_name_static(), 9 ), 2 ) ;
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Line::type_name_static(), 9 ), 9 ) ;

        // For line 10
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Line::type_name_static(), 10 ), 2 ) ;
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Line::type_name_static(), 10 ), 5 ) ;

        // For line 11
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Line::type_name_static(), 11 ), 2 ) ;
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Line::type_name_static(), 11 ), 7 ) ;

        // For line 12
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Line::type_name_static(), 12 ), 3 ) ;
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Line::type_name_static(), 12 ), 7 ) ;

        // For line 13
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Line::type_name_static(), 13 ), 8 ) ;
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Line::type_name_static(), 13 ), 4 ) ;

        // For line 14
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Line::type_name_static(), 14 ), 3 ) ;
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Line::type_name_static(), 14 ), 9 ) ;

        // For line 15
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Line::type_name_static(), 15 ), 4 ) ;
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Line::type_name_static(), 15 ), 10 ) ;

        // For line 16
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Line::type_name_static(), 16 ), 7 ) ;
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Line::type_name_static(), 16 ), 5 ) ;

        // For line 17
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Line::type_name_static(), 17 ), 8 ) ;
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Line::type_name_static(), 17 ), 6 ) ;

        // For line 18
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Line::type_name_static(), 18 ), 5 ) ;
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Line::type_name_static(), 18 ), 9 ) ;

        // For line 19
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Line::type_name_static(), 19 ), 6 ) ;
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Line::type_name_static(), 19 ), 10 ) ;

        /////////////////////////////////////////////////////////

        // For surface 0
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Surface::type_name_static(), 0 ), 0 ) ;

        // For surface 1
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Surface::type_name_static(), 1 ), 0 ) ;

        // For surface 2
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Surface::type_name_static(), 2 ), 1 ) ;

        // For surface 3
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Surface::type_name_static(), 3 ), 1 ) ;

        // For surface 4
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Surface::type_name_static(), 4 ), 0 ) ;

        // For surface 5
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Surface::type_name_static(), 5 ), 1 ) ;

        // For surface 6
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Surface::type_name_static(), 6 ), 0 ) ;

        // For surface 7
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Surface::type_name_static(), 7 ), 1 ) ;

        // For surface 8
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Surface::type_name_static(), 8 ), 0 ) ;

        // For surface 9
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Surface::type_name_static(), 9 ), 1 ) ;

        // For surface 10
        geomodel_builder.add_mesh_entity_in_boundary(
            gme_t( Surface::type_name_static(), 10 ), 0 ) ;


        // For the Universe Boundary
        geomodel_builder.add_universe_boundary(0,true) ;
        geomodel_builder.add_universe_boundary(2,true) ;
        geomodel_builder.add_universe_boundary(3,true) ;
        geomodel_builder.add_universe_boundary(4,true) ;
        geomodel_builder.add_universe_boundary(5,true) ;
        geomodel_builder.add_universe_boundary(6,true) ;
        geomodel_builder.add_universe_boundary(7,true) ;
        geomodel_builder.add_universe_boundary(8,true) ;
        geomodel_builder.add_universe_boundary(9,true) ;
        geomodel_builder.add_universe_boundary(10,true) ;


        //#####################################
        // Setting the parent/child relations #
        //#####################################

        // Remember :
        // Child of a Contact is a Line
        // Child of an Interface is a Surface
        // Child of a Layer is a Region

        //We use the method "add_geological_entity_child"
        // First argument is the parent (ie a GeoModelGeologicalEntity)
        // Second argument is the index of the child (ie a GeoModelMeshEntity)

        // For Contact 0
        geomodel_builder.add_geological_entity_child(
            gme_t( Contact::type_name_static(), 0 ), 0 ) ;

        // For Contact 1
        geomodel_builder.add_geological_entity_child(
            gme_t( Contact::type_name_static(), 1 ), 1 ) ;

        // For Contact 2
        geomodel_builder.add_geological_entity_child(
            gme_t( Contact::type_name_static(), 2 ), 2 ) ;

        // For Contact 3
        geomodel_builder.add_geological_entity_child(
            gme_t( Contact::type_name_static(), 3 ), 3 ) ;

        // For Contact 4
        geomodel_builder.add_geological_entity_child(
            gme_t( Contact::type_name_static(), 4 ), 4 ) ;

        // For Contact 5
        geomodel_builder.add_geological_entity_child(
            gme_t( Contact::type_name_static(), 5 ), 5 ) ;

        // For Contact 6
        geomodel_builder.add_geological_entity_child(
            gme_t( Contact::type_name_static(), 6 ), 6 ) ;

        // For Contact 7
        geomodel_builder.add_geological_entity_child(
            gme_t( Contact::type_name_static(), 7 ), 7 ) ;

        // For Contact 8
        geomodel_builder.add_geological_entity_child(
            gme_t( Contact::type_name_static(), 8 ), 8 ) ;

        // For Contact 9
        geomodel_builder.add_geological_entity_child(
            gme_t( Contact::type_name_static(), 9 ), 9 ) ;

        // For Contact 10
        geomodel_builder.add_geological_entity_child(
            gme_t( Contact::type_name_static(), 10 ), 10 ) ;

        // For Contact 11
        geomodel_builder.add_geological_entity_child(
            gme_t( Contact::type_name_static(), 11 ), 11 ) ;

        // For Contact 12
        geomodel_builder.add_geological_entity_child(
            gme_t( Contact::type_name_static(), 12 ), 12 ) ;
        geomodel_builder.add_geological_entity_child(
            gme_t( Contact::type_name_static(), 12 ), 13 ) ;

        // For Contact 13
        geomodel_builder.add_geological_entity_child(
            gme_t( Contact::type_name_static(), 13 ), 14 ) ;
        geomodel_builder.add_geological_entity_child(
            gme_t( Contact::type_name_static(), 13 ), 15 ) ;

        // For Contact 14
        geomodel_builder.add_geological_entity_child(
            gme_t( Contact::type_name_static(), 14 ), 16 ) ;
        geomodel_builder.add_geological_entity_child(
            gme_t( Contact::type_name_static(), 14 ), 17 ) ;

        // For Contact 15
        geomodel_builder.add_geological_entity_child(
            gme_t( Contact::type_name_static(), 15 ), 19 ) ;
        geomodel_builder.add_geological_entity_child(
            gme_t( Contact::type_name_static(), 15 ), 18 ) ;

        /////////////////////////////////////////////////

        // For Interface 0
        geomodel_builder.add_geological_entity_child(
            gme_t( Interface::type_name_static(), 0 ), 0 ) ;

        // For Interface 1
        geomodel_builder.add_geological_entity_child(
            gme_t( Interface::type_name_static(), 1 ), 1 ) ;

        // For Interface 2
        geomodel_builder.add_geological_entity_child(
            gme_t( Interface::type_name_static(), 2 ), 2 ) ;

        // For Interface 3
        geomodel_builder.add_geological_entity_child(
            gme_t( Interface::type_name_static(), 3 ), 3 ) ;
        geomodel_builder.add_geological_entity_child(
            gme_t( Interface::type_name_static(), 3 ), 4 ) ;

        // For Interface 4
        geomodel_builder.add_geological_entity_child(
            gme_t( Interface::type_name_static(), 4 ), 5 ) ;
        geomodel_builder.add_geological_entity_child(
            gme_t( Interface::type_name_static(), 4 ), 6 ) ;

        // For Interface 5
        geomodel_builder.add_geological_entity_child(
            gme_t( Interface::type_name_static(), 5 ), 10 ) ;
        geomodel_builder.add_geological_entity_child(
            gme_t( Interface::type_name_static(), 5 ), 9 ) ;

        // For Interface 6
        geomodel_builder.add_geological_entity_child(
            gme_t( Interface::type_name_static(), 6 ), 8 ) ;
        geomodel_builder.add_geological_entity_child(
            gme_t( Interface::type_name_static(), 6 ), 7 ) ;

        ///////////////////////////////////////////////////

        // For Layer 0
        geomodel_builder.add_geological_entity_child(
            gme_t( Layer::type_name_static(), 0 ), 0 ) ;

        // For Layer 1
        geomodel_builder.add_geological_entity_child(
            gme_t( Layer::type_name_static(), 1 ), 1 ) ;


        // Then, we end the model building
        // This method will set the missing information for the boundaries
        // and parent/child relation. e. g., if you decide to use the
        // add_geological_entity_child (like above), the child has no information of who
        // is his parent. This method deal with that by filling the missing information
        geomodel_builder.end_model() ;

        // We save the builded model
        geomodel_save( geomodel, "builded_model.gm" ) ;

    } catch( const RINGMeshException& e ) {
        Logger::err( e.category() ) << e.what() << std::endl ;
        return 1 ;
    } catch( const std::exception& e ) {
        Logger::err( "Exception" ) << e.what() << std::endl ;
        return 1 ;
    }
    return 0 ;
}
