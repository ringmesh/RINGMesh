/*
 * Copyright (c) 2012-2017, Association Scientifique pour la Geologie et ses Applications (ASGA)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of ASGA nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL ASGA BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *     http://www.ring-team.org
 *
 *     RING Project
 *     Ecole Nationale Superieure de Geologie - GeoRessources
 *     2 Rue du Doyen Marcel Roubault - TSA 70605
 *     54518 VANDOEUVRE-LES-NANCY
 *     FRANCE
 */

#include <ringmesh/geomodel/geomodel_builder.h>

#include <stack>

#include <ringmesh/basic/geometry.h>

#include <ringmesh/geomodel/geomodel_api.h>

/*!
 * @file ringmesh/geomodel/geomodel_builder.cpp
 * @brief Implementation of the classes to build GeoModel from various inputs
 * @author Jeanne Pellerin
 */

namespace RINGMesh {

    template< index_t DIMENSION >
    GeoModelBuilderCopy< DIMENSION >::GeoModelBuilderCopy(
        GeoModelBuilder< DIMENSION >& builder,
        GeoModel< DIMENSION >& geomodel )
        : builder_( builder ), geomodel_( geomodel ), geomodel_access_( geomodel )
    {
    }

    template< index_t DIMENSION >
    void GeoModelBuilderCopy< DIMENSION >::copy_geomodel(
        const GeoModel< DIMENSION >& from )
    {
        builder_.topology.copy_topology( from );
        builder_.geometry.copy_meshes( from );
        builder_.geology.copy_geology( from );
    }

    template< index_t DIMENSION >
    GeoModelBuilderInfo< DIMENSION >::GeoModelBuilderInfo(
        GeoModelBuilder< DIMENSION >& builder,
        GeoModel< DIMENSION >& geomodel )
        : builder_( builder ), geomodel_( geomodel ), geomodel_access_( geomodel )
    {
    }

    template< index_t DIMENSION >
    GeoModelBuilder< DIMENSION >::GeoModelBuilder( GeoModel< DIMENSION >& geomodel )
        :
            topology( *this, geomodel ),
            geometry( *this, geomodel ),
            geology( *this, geomodel ),
            removal( *this, geomodel ),
            repair( *this, geomodel ),
            copy( *this, geomodel ),
            info( *this, geomodel ),
            from_surfaces( *this, geomodel ),
            geomodel_( geomodel ),
            geomodel_access_( geomodel )
    {
    }

    template< index_t DIMENSION >
    void GeoModelBuilder< DIMENSION >::end_geomodel()
    {
        if( geomodel_.name().empty() ) {
            info.set_geomodel_name( "model_default_name" );
        }

        geometry.cut_surfaces_by_internal_lines();
        geometry.cut_regions_by_internal_surfaces();
        topology.compute_universe();

        // Deliberate clear of the geomodel vertices used for geomodel building
        geomodel_.mesh.vertices.clear();
    }

    template< index_t DIMENSION >
    void GeoModelBuilder< DIMENSION >::build_brep_regions_from_surfaces()
    {
        if( geomodel_.nb_lines() == 0 ) {
            Logger::warn( "GeoModel", "No Line in the Geomodel ", geomodel_.name(),
                ".", "Computing Lines from Surfaces..." );
            from_surfaces.build_lines_and_corners_from_surfaces();
        }

        std::vector< GeoModelRegionFromSurfaces > region_info_( geomodel_.nb_lines() );


        // Sort surfaces around the contacts
        for( GeoModelRegionFromSurfaces*& info : regions_info_ ) {
            info->sort();
        }

        if( geomodel_.nb_surfaces() == 1 ) {
            if( geomodel_.nb_lines() != 0 ) {
                Logger::err( "GeoModel",
                    "The unique surface provided to build the geomodel has boundaries " );
                return false;
            } else {
                /// If there is only one surface, its inside is set to be
                /// the + side. No further check.
                bool inside = true;
                // Create the region - set the surface on its boundaries
                gmme_id region_id( Region < DIMENSION > ::type_name_static(),
                    geomodel_.nb_regions() );
                builder_.topology.create_mesh_entities(
                    Region < DIMENSION > ::type_name_static(), 1 );
                gmme_id surface_id( Surface < DIMENSION > ::type_name_static(), 0 );
                builder_.topology.add_mesh_entity_boundary_relation( region_id,
                    surface_id, inside );

                // Set universe boundary
                builder_.topology.add_universe_boundary( 0, !inside );
            }
        } else {
            // Each side of each Surface is in one Region( +side is first )
            std::vector < index_t
                > surf_2_region( 2 * geomodel_.nb_surfaces(), NO_ID );

            // Start with the first Surface on its + side
            std::stack < std::pair< index_t, bool > > S;
            S.emplace( 0, true );

            while( !S.empty() ) {
                std::pair< index_t, bool > cur = S.top();
                S.pop();
                // This side is already assigned
                if( surf_2_region[
                    cur.second == true ? 2 * cur.first : 2 * cur.first + 1]
                    != NO_ID ) {
                    continue;
                }
                // Create a new region
                gmme_id cur_region_id( Region < DIMENSION > ::type_name_static(),
                    geomodel_.nb_regions() );
                builder_.topology.create_mesh_entities(
                    Region < DIMENSION > ::type_name_static(), 1 );
                // Get all oriented surfaces defining this region
                std::stack < std::pair< index_t, bool > > SR;
                SR.push( cur );
                while( !SR.empty() ) {
                    std::pair< index_t, bool > s = SR.top();
                    SR.pop();
                    index_t s_id = s.second == true ? 2 * s.first : 2 * s.first + 1;
                    // This oriented surface has already been visited
                    if( surf_2_region[s_id] != NO_ID ) {
                        continue;
                    }
                    // Add the surface to the current region
                    builder_.topology.add_mesh_entity_boundary_relation(
                        cur_region_id,
                        gmme_id( Surface < DIMENSION > ::type_name_static(),
                            s.first ), s.second );
                    surf_2_region[s_id] = cur_region_id.index();

                    // Check the other side of the surface and push it in S
                    index_t s_id_opp =
                        !s.second == true ? 2 * s.first : 2 * s.first + 1;
                    if( surf_2_region[s_id_opp] == NO_ID ) {
                        S.emplace( s.first, !s.second );
                    }
                    // For each contact, push the next oriented surface that is in the same region
                    const Surface< DIMENSION >& surface = geomodel_.surface(
                        s.first );
                    for( index_t i = 0; i < surface.nb_boundaries(); ++i ) {
                        const std::pair< index_t, bool >& n =
                            regions_info_[surface.boundary_gmme( i ).index()]->next(
                                s );
                        index_t n_id =
                            n.second == true ? 2 * n.first : 2 * n.first + 1;

                        if( surf_2_region[n_id] == NO_ID ) {
                            SR.push( n );
                        }
                    }
                }
            }

            // Check if all the surfaces were visited
            // If not, this means that there are additionnal regions included in those built
            if( std::count( surf_2_region.begin(), surf_2_region.end(), NO_ID )
                != 0 ) {
                Logger::err( "GeoModel",
                    "Small bubble regions were skipped at geomodel building " );
                // Or, most probably, we have a problem before
                ringmesh_assert( false );
            }

            builder_.topology.compute_universe();
            // We need to remove from the regions_ the one corresponding
            // to the universe_, the one with the biggest volume
            double max_volume = -1.;
            index_t universe_id = NO_ID;
            for( index_t i = 0; i < geomodel_.nb_regions(); ++i ) {
                double cur_volume = geomodel_.region( i ).size();
                if( cur_volume > max_volume ) {
                    max_volume = cur_volume;
                    universe_id = i;
                }
            }
            const Region< DIMENSION >& cur_region = geomodel_.region( universe_id );
            for( index_t i = 0; i < cur_region.nb_boundaries(); ++i ) {
                // Fill the Universe region boundaries
                // They are supposed to be empty
                builder_.topology.add_universe_boundary(
                    cur_region.boundary( i ).index(), cur_region.side( i ) );
            }
            std::set < gmme_id > to_erase;
            to_erase.insert( cur_region.gmme() );
            builder_.removal.remove_mesh_entities( to_erase );
        }
        return true;
    }

//    template class RINGMESH_API GeoModelBuilder< 2 > ;
    //    template class RINGMESH_API GeoModelBuilderInfo< 2 > ;
    //    template class RINGMESH_API GeoModelBuilderCopy< 2 > ;

    template class RINGMESH_API GeoModelBuilder< 3 > ;
    template class RINGMESH_API GeoModelBuilderInfo< 3 > ;
    template class RINGMESH_API GeoModelBuilderCopy< 3 > ;

} // namespace
