Terminals unused in grammar

   PTR_OP
   INC_OP
   DEC_OP
   LEFT_OP
   RIGHT_OP
   LEFT_ASSIGN
   RIGHT_ASSIGN
   STRING_LITERAL


State 27 conflicts: 1 shift/reduce
State 190 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 identifier_expression: IDENTIFIER

    2 primary_expression: identifier_expression
    3                   | INT_CONSTANT
    4                   | FLOAT_CONSTANT
    5                   | '(' expression ')'

    6 postfix_expression: primary_expression
    7                   | ABS '(' expression ')'
    8                   | SIGN '(' expression ')'
    9                   | SQRT '(' expression ')'
   10                   | IDENTIFIER '(' ')'
   11                   | IDENTIFIER '(' argument_expression_list ')'
   12                   | COMPARE '(' expression ',' expression ')'

   13 argument_expression_list: expression
   14                         | argument_expression_list ',' expression

   15 unary_expression: postfix_expression
   16                 | unary_operator postfix_expression

   17 unary_operator: '+'
   18               | '-'
   19               | '!'

   20 cast_expression: unary_expression

   21 multiplicative_expression: cast_expression
   22                          | multiplicative_expression binary_op_kind_mul cast_expression

   23 binary_op_kind_mul: '*'
   24                   | '/'

   25 additive_expression: multiplicative_expression
   26                    | additive_expression binary_op_kind_add multiplicative_expression

   27 binary_op_kind_add: '+'
   28                   | '-'

   29 relational_expression: additive_expression
   30                      | relational_expression binary_op_kind_rel additive_expression

   31 binary_op_kind_rel: '<'
   32                   | '>'
   33                   | LE_OP
   34                   | GE_OP

   35 equality_expression: relational_expression
   36                    | equality_expression EQ_OP relational_expression
   37                    | equality_expression NE_OP relational_expression

   38 logical_and_expression: equality_expression
   39                       | logical_and_expression AND_OP equality_expression

   40 logical_or_expression: logical_and_expression
   41                      | logical_or_expression OR_OP logical_and_expression

   42 conditional_expression: logical_or_expression
   43                       | logical_or_expression '?' expression ':' conditional_expression

   44 assignment_expression: conditional_expression
   45                      | unary_expression assignment_operator assignment_expression

   46 assignment_operator: '='
   47                    | MUL_ASSIGN
   48                    | DIV_ASSIGN
   49                    | MOD_ASSIGN
   50                    | ADD_ASSIGN
   51                    | SUB_ASSIGN
   52                    | AND_ASSIGN
   53                    | XOR_ASSIGN
   54                    | OR_ASSIGN

   55 expression: conditional_expression

   56 statement: compound_statement
   57          | declaration
   58          | conditional_statement
   59          | expression_statement
   60          | jump_statement

   61 statement_list: statement
   62               | statement_list statement

   63 expression_statement: assignment_expression ';'

   64 compound_statement: '{' '}'

   65 $@1: %empty

   66 compound_statement: '{' $@1 statement_list '}'

   67 conditional_statement: IF '(' expression ')' statement
   68                      | IF '(' expression ')' statement ELSE statement

   69 jump_statement: RETURN ';'
   70               | RETURN expression ';'

   71 declaration: declaration_specifiers init_declarator_list ';'
   72            | TYPEDEF type_specifier IDENTIFIER ';'
   73            | enum_specifier ';'

   74 declaration_specifiers: type_specifier

   75 init_declarator_list: init_declarator
   76                     | init_declarator_list ',' init_declarator

   77 init_declarator: declarator

   78 $@2: %empty

   79 init_declarator: declarator '=' $@2 initializer

   80 initializer: assignment_expression

   81 type_specifier: VOID
   82               | INT
   83               | FLOAT
   84               | DOUBLE
   85               | BOOL
   86               | USER_TYPE

   87 $@3: %empty

   88 enum_specifier: ENUM IDENTIFIER $@3 '{' enumerator_list '}'

   89 enumerator_list: enumerator
   90                | enumerator_list ',' enumerator

   91 enumerator: IDENTIFIER
   92           | IDENTIFIER '=' INT_CONSTANT

   93 declarator: declarator2

   94 declarator2: direct_declarator

   95 direct_declarator: IDENTIFIER
   96                  | '(' declarator2 ')'
   97                  | IDENTIFIER '(' parameter_list ')'
   98                  | IDENTIFIER '(' ')'

   99 parameter_list: parameter_declaration
  100               | parameter_list ',' parameter_declaration

  101 parameter_declaration: type_specifier declarator2

  102 group_options: %empty
  103              | '[' DEGREE '=' INT_CONSTANT ']'

  104 group_var_list: IDENTIFIER
  105               | group_var_list IDENTIFIER

  106 single_group: GROUP group_options group_var_list ';'

  107 group_definition2: single_group
  108                  | group_definition single_group

  109 group_definition: %empty
  110                 | group_definition2

  111 @4: %empty

  112 function_definition: declaration_specifiers declarator2 group_definition @4 compound_statement

  113 translation_unit: external_declaration
  114                 | translation_unit external_declaration

  115 external_declaration: function_definition
  116                     | declaration
  117                     | INLINE
  118                     | EXTERN
  119                     | EXACT

  120 program: translation_unit


Terminals, with rules where they appear

$end (0) 0
'!' (33) 19
'(' (40) 5 7 8 9 10 11 12 67 68 96 97 98
')' (41) 5 7 8 9 10 11 12 67 68 96 97 98
'*' (42) 23
'+' (43) 17 27
',' (44) 12 14 76 90 100
'-' (45) 18 28
'/' (47) 24
':' (58) 43
';' (59) 63 69 70 71 72 73 106
'<' (60) 31
'=' (61) 46 79 92 103
'>' (62) 32
'?' (63) 43
'[' (91) 103
']' (93) 103
'{' (123) 64 66 88
'}' (125) 64 66 88
error (256)
PTR_OP (258)
INC_OP (259)
DEC_OP (260)
LEFT_OP (261)
RIGHT_OP (262)
LE_OP (263) 33
GE_OP (264) 34
EQ_OP (265) 36
NE_OP (266) 37
AND_OP (267) 39
OR_OP (268) 41
MUL_ASSIGN (269) 47
DIV_ASSIGN (270) 48
MOD_ASSIGN (271) 49
ADD_ASSIGN (272) 50
SUB_ASSIGN (273) 51
LEFT_ASSIGN (274)
RIGHT_ASSIGN (275)
AND_ASSIGN (276) 52
XOR_ASSIGN (277) 53
OR_ASSIGN (278) 54
INT (279) 82
FLOAT (280) 83
DOUBLE (281) 84
VOID (282) 81
TYPEDEF (283) 72
INLINE (284) 117
BOOL (285) 85
IF (286) 67 68
ELSE (287) 68
RETURN (288) 69 70
SIGN (289) 8
ABS (290) 7
SQRT (291) 9
COMPARE (292) 12
ENUM (293) 88
EXTERN (294) 118
EXACT (295) 119
GROUP (296) 106
DEGREE (297) 103
INT_CONSTANT (298) 3 92 103
FLOAT_CONSTANT (299) 4
IDENTIFIER (300) 1 10 11 72 88 91 92 95 97 98 104 105
STRING_LITERAL (301)
USER_TYPE (302) 86


Nonterminals, with rules where they appear

$accept (66)
    on left: 0
identifier_expression (67)
    on left: 1, on right: 2
primary_expression (68)
    on left: 2 3 4 5, on right: 6
postfix_expression (69)
    on left: 6 7 8 9 10 11 12, on right: 15 16
argument_expression_list (70)
    on left: 13 14, on right: 11 14
unary_expression (71)
    on left: 15 16, on right: 20 45
unary_operator (72)
    on left: 17 18 19, on right: 16
cast_expression (73)
    on left: 20, on right: 21 22
multiplicative_expression (74)
    on left: 21 22, on right: 22 25 26
binary_op_kind_mul (75)
    on left: 23 24, on right: 22
additive_expression (76)
    on left: 25 26, on right: 26 29 30
binary_op_kind_add (77)
    on left: 27 28, on right: 26
relational_expression (78)
    on left: 29 30, on right: 30 35 36 37
binary_op_kind_rel (79)
    on left: 31 32 33 34, on right: 30
equality_expression (80)
    on left: 35 36 37, on right: 36 37 38 39
logical_and_expression (81)
    on left: 38 39, on right: 39 40 41
logical_or_expression (82)
    on left: 40 41, on right: 41 42 43
conditional_expression (83)
    on left: 42 43, on right: 43 44 55
assignment_expression (84)
    on left: 44 45, on right: 45 63 80
assignment_operator (85)
    on left: 46 47 48 49 50 51 52 53 54, on right: 45
expression (86)
    on left: 55, on right: 5 7 8 9 12 13 14 43 67 68 70
statement (87)
    on left: 56 57 58 59 60, on right: 61 62 67 68
statement_list (88)
    on left: 61 62, on right: 62 66
expression_statement (89)
    on left: 63, on right: 59
compound_statement (90)
    on left: 64 66, on right: 56 112
$@1 (91)
    on left: 65, on right: 66
conditional_statement (92)
    on left: 67 68, on right: 58
jump_statement (93)
    on left: 69 70, on right: 60
declaration (94)
    on left: 71 72 73, on right: 57 116
declaration_specifiers (95)
    on left: 74, on right: 71 112
init_declarator_list (96)
    on left: 75 76, on right: 71 76
init_declarator (97)
    on left: 77 79, on right: 75 76
$@2 (98)
    on left: 78, on right: 79
initializer (99)
    on left: 80, on right: 79
type_specifier (100)
    on left: 81 82 83 84 85 86, on right: 72 74 101
enum_specifier (101)
    on left: 88, on right: 73
$@3 (102)
    on left: 87, on right: 88
enumerator_list (103)
    on left: 89 90, on right: 88 90
enumerator (104)
    on left: 91 92, on right: 89 90
declarator (105)
    on left: 93, on right: 77 79
declarator2 (106)
    on left: 94, on right: 93 96 101 112
direct_declarator (107)
    on left: 95 96 97 98, on right: 94
parameter_list (108)
    on left: 99 100, on right: 97 100
parameter_declaration (109)
    on left: 101, on right: 99 100
group_options (110)
    on left: 102 103, on right: 106
group_var_list (111)
    on left: 104 105, on right: 105 106
single_group (112)
    on left: 106, on right: 107 108
group_definition2 (113)
    on left: 107 108, on right: 110
group_definition (114)
    on left: 109 110, on right: 108 112
function_definition (115)
    on left: 112, on right: 115
@4 (116)
    on left: 111, on right: 112
translation_unit (117)
    on left: 113 114, on right: 114 120
external_declaration (118)
    on left: 115 116 117 118 119, on right: 113 114
program (119)
    on left: 120, on right: 0


State 0

    0 $accept: . program $end
   71 declaration: . declaration_specifiers init_declarator_list ';'
   72            | . TYPEDEF type_specifier IDENTIFIER ';'
   73            | . enum_specifier ';'
   74 declaration_specifiers: . type_specifier
   81 type_specifier: . VOID
   82               | . INT
   83               | . FLOAT
   84               | . DOUBLE
   85               | . BOOL
   86               | . USER_TYPE
   88 enum_specifier: . ENUM IDENTIFIER $@3 '{' enumerator_list '}'
  112 function_definition: . declaration_specifiers declarator2 group_definition @4 compound_statement
  113 translation_unit: . external_declaration
  114                 | . translation_unit external_declaration
  115 external_declaration: . function_definition
  116                     | . declaration
  117                     | . INLINE
  118                     | . EXTERN
  119                     | . EXACT
  120 program: . translation_unit

    INT        shift, and go to state 1
    FLOAT      shift, and go to state 2
    DOUBLE     shift, and go to state 3
    VOID       shift, and go to state 4
    TYPEDEF    shift, and go to state 5
    INLINE     shift, and go to state 6
    BOOL       shift, and go to state 7
    ENUM       shift, and go to state 8
    EXTERN     shift, and go to state 9
    EXACT      shift, and go to state 10
    USER_TYPE  shift, and go to state 11

    declaration             go to state 12
    declaration_specifiers  go to state 13
    type_specifier          go to state 14
    enum_specifier          go to state 15
    function_definition     go to state 16
    translation_unit        go to state 17
    external_declaration    go to state 18
    program                 go to state 19


State 1

   82 type_specifier: INT .

    $default  reduce using rule 82 (type_specifier)


State 2

   83 type_specifier: FLOAT .

    $default  reduce using rule 83 (type_specifier)


State 3

   84 type_specifier: DOUBLE .

    $default  reduce using rule 84 (type_specifier)


State 4

   81 type_specifier: VOID .

    $default  reduce using rule 81 (type_specifier)


State 5

   72 declaration: TYPEDEF . type_specifier IDENTIFIER ';'
   81 type_specifier: . VOID
   82               | . INT
   83               | . FLOAT
   84               | . DOUBLE
   85               | . BOOL
   86               | . USER_TYPE

    INT        shift, and go to state 1
    FLOAT      shift, and go to state 2
    DOUBLE     shift, and go to state 3
    VOID       shift, and go to state 4
    BOOL       shift, and go to state 7
    USER_TYPE  shift, and go to state 11

    type_specifier  go to state 20


State 6

  117 external_declaration: INLINE .

    $default  reduce using rule 117 (external_declaration)


State 7

   85 type_specifier: BOOL .

    $default  reduce using rule 85 (type_specifier)


State 8

   88 enum_specifier: ENUM . IDENTIFIER $@3 '{' enumerator_list '}'

    IDENTIFIER  shift, and go to state 21


State 9

  118 external_declaration: EXTERN .

    $default  reduce using rule 118 (external_declaration)


State 10

  119 external_declaration: EXACT .

    $default  reduce using rule 119 (external_declaration)


State 11

   86 type_specifier: USER_TYPE .

    $default  reduce using rule 86 (type_specifier)


State 12

  116 external_declaration: declaration .

    $default  reduce using rule 116 (external_declaration)


State 13

   71 declaration: declaration_specifiers . init_declarator_list ';'
   75 init_declarator_list: . init_declarator
   76                     | . init_declarator_list ',' init_declarator
   77 init_declarator: . declarator
   79                | . declarator '=' $@2 initializer
   93 declarator: . declarator2
   94 declarator2: . direct_declarator
   95 direct_declarator: . IDENTIFIER
   96                  | . '(' declarator2 ')'
   97                  | . IDENTIFIER '(' parameter_list ')'
   98                  | . IDENTIFIER '(' ')'
  112 function_definition: declaration_specifiers . declarator2 group_definition @4 compound_statement

    IDENTIFIER  shift, and go to state 22
    '('         shift, and go to state 23

    init_declarator_list  go to state 24
    init_declarator       go to state 25
    declarator            go to state 26
    declarator2           go to state 27
    direct_declarator     go to state 28


State 14

   74 declaration_specifiers: type_specifier .

    $default  reduce using rule 74 (declaration_specifiers)


State 15

   73 declaration: enum_specifier . ';'

    ';'  shift, and go to state 29


State 16

  115 external_declaration: function_definition .

    $default  reduce using rule 115 (external_declaration)


State 17

   71 declaration: . declaration_specifiers init_declarator_list ';'
   72            | . TYPEDEF type_specifier IDENTIFIER ';'
   73            | . enum_specifier ';'
   74 declaration_specifiers: . type_specifier
   81 type_specifier: . VOID
   82               | . INT
   83               | . FLOAT
   84               | . DOUBLE
   85               | . BOOL
   86               | . USER_TYPE
   88 enum_specifier: . ENUM IDENTIFIER $@3 '{' enumerator_list '}'
  112 function_definition: . declaration_specifiers declarator2 group_definition @4 compound_statement
  114 translation_unit: translation_unit . external_declaration
  115 external_declaration: . function_definition
  116                     | . declaration
  117                     | . INLINE
  118                     | . EXTERN
  119                     | . EXACT
  120 program: translation_unit .  [$end]

    INT        shift, and go to state 1
    FLOAT      shift, and go to state 2
    DOUBLE     shift, and go to state 3
    VOID       shift, and go to state 4
    TYPEDEF    shift, and go to state 5
    INLINE     shift, and go to state 6
    BOOL       shift, and go to state 7
    ENUM       shift, and go to state 8
    EXTERN     shift, and go to state 9
    EXACT      shift, and go to state 10
    USER_TYPE  shift, and go to state 11

    $default  reduce using rule 120 (program)

    declaration             go to state 12
    declaration_specifiers  go to state 13
    type_specifier          go to state 14
    enum_specifier          go to state 15
    function_definition     go to state 16
    external_declaration    go to state 30


State 18

  113 translation_unit: external_declaration .

    $default  reduce using rule 113 (translation_unit)


State 19

    0 $accept: program . $end

    $end  shift, and go to state 31


State 20

   72 declaration: TYPEDEF type_specifier . IDENTIFIER ';'

    IDENTIFIER  shift, and go to state 32


State 21

   87 $@3: . %empty
   88 enum_specifier: ENUM IDENTIFIER . $@3 '{' enumerator_list '}'

    $default  reduce using rule 87 ($@3)

    $@3  go to state 33


State 22

   95 direct_declarator: IDENTIFIER .  [GROUP, ')', ',', '=', ';', '{']
   97                  | IDENTIFIER . '(' parameter_list ')'
   98                  | IDENTIFIER . '(' ')'

    '('  shift, and go to state 34

    $default  reduce using rule 95 (direct_declarator)


State 23

   94 declarator2: . direct_declarator
   95 direct_declarator: . IDENTIFIER
   96                  | . '(' declarator2 ')'
   96                  | '(' . declarator2 ')'
   97                  | . IDENTIFIER '(' parameter_list ')'
   98                  | . IDENTIFIER '(' ')'

    IDENTIFIER  shift, and go to state 22
    '('         shift, and go to state 23

    declarator2        go to state 35
    direct_declarator  go to state 28


State 24

   71 declaration: declaration_specifiers init_declarator_list . ';'
   76 init_declarator_list: init_declarator_list . ',' init_declarator

    ','  shift, and go to state 36
    ';'  shift, and go to state 37


State 25

   75 init_declarator_list: init_declarator .

    $default  reduce using rule 75 (init_declarator_list)


State 26

   77 init_declarator: declarator .  [',', ';']
   79                | declarator . '=' $@2 initializer

    '='  shift, and go to state 38

    $default  reduce using rule 77 (init_declarator)


State 27

   93 declarator: declarator2 .  [',', '=', ';']
  106 single_group: . GROUP group_options group_var_list ';'
  107 group_definition2: . single_group
  108                  | . group_definition single_group
  109 group_definition: . %empty  [GROUP, '{']
  110                 | . group_definition2
  112 function_definition: declaration_specifiers declarator2 . group_definition @4 compound_statement

    GROUP  shift, and go to state 39

    GROUP     [reduce using rule 109 (group_definition)]
    '{'       reduce using rule 109 (group_definition)
    $default  reduce using rule 93 (declarator)

    single_group       go to state 40
    group_definition2  go to state 41
    group_definition   go to state 42


State 28

   94 declarator2: direct_declarator .

    $default  reduce using rule 94 (declarator2)


State 29

   73 declaration: enum_specifier ';' .

    $default  reduce using rule 73 (declaration)


State 30

  114 translation_unit: translation_unit external_declaration .

    $default  reduce using rule 114 (translation_unit)


State 31

    0 $accept: program $end .

    $default  accept


State 32

   72 declaration: TYPEDEF type_specifier IDENTIFIER . ';'

    ';'  shift, and go to state 43


State 33

   88 enum_specifier: ENUM IDENTIFIER $@3 . '{' enumerator_list '}'

    '{'  shift, and go to state 44


State 34

   81 type_specifier: . VOID
   82               | . INT
   83               | . FLOAT
   84               | . DOUBLE
   85               | . BOOL
   86               | . USER_TYPE
   97 direct_declarator: IDENTIFIER '(' . parameter_list ')'
   98                  | IDENTIFIER '(' . ')'
   99 parameter_list: . parameter_declaration
  100               | . parameter_list ',' parameter_declaration
  101 parameter_declaration: . type_specifier declarator2

    INT        shift, and go to state 1
    FLOAT      shift, and go to state 2
    DOUBLE     shift, and go to state 3
    VOID       shift, and go to state 4
    BOOL       shift, and go to state 7
    USER_TYPE  shift, and go to state 11
    ')'        shift, and go to state 45

    type_specifier         go to state 46
    parameter_list         go to state 47
    parameter_declaration  go to state 48


State 35

   96 direct_declarator: '(' declarator2 . ')'

    ')'  shift, and go to state 49


State 36

   76 init_declarator_list: init_declarator_list ',' . init_declarator
   77 init_declarator: . declarator
   79                | . declarator '=' $@2 initializer
   93 declarator: . declarator2
   94 declarator2: . direct_declarator
   95 direct_declarator: . IDENTIFIER
   96                  | . '(' declarator2 ')'
   97                  | . IDENTIFIER '(' parameter_list ')'
   98                  | . IDENTIFIER '(' ')'

    IDENTIFIER  shift, and go to state 22
    '('         shift, and go to state 23

    init_declarator    go to state 50
    declarator         go to state 26
    declarator2        go to state 51
    direct_declarator  go to state 28


State 37

   71 declaration: declaration_specifiers init_declarator_list ';' .

    $default  reduce using rule 71 (declaration)


State 38

   78 $@2: . %empty
   79 init_declarator: declarator '=' . $@2 initializer

    $default  reduce using rule 78 ($@2)

    $@2  go to state 52


State 39

  102 group_options: . %empty  [IDENTIFIER]
  103              | . '[' DEGREE '=' INT_CONSTANT ']'
  106 single_group: GROUP . group_options group_var_list ';'

    '['  shift, and go to state 53

    $default  reduce using rule 102 (group_options)

    group_options  go to state 54


State 40

  107 group_definition2: single_group .

    $default  reduce using rule 107 (group_definition2)


State 41

  110 group_definition: group_definition2 .

    $default  reduce using rule 110 (group_definition)


State 42

  106 single_group: . GROUP group_options group_var_list ';'
  108 group_definition2: group_definition . single_group
  111 @4: . %empty  ['{']
  112 function_definition: declaration_specifiers declarator2 group_definition . @4 compound_statement

    GROUP  shift, and go to state 39

    $default  reduce using rule 111 (@4)

    single_group  go to state 55
    @4            go to state 56


State 43

   72 declaration: TYPEDEF type_specifier IDENTIFIER ';' .

    $default  reduce using rule 72 (declaration)


State 44

   88 enum_specifier: ENUM IDENTIFIER $@3 '{' . enumerator_list '}'
   89 enumerator_list: . enumerator
   90                | . enumerator_list ',' enumerator
   91 enumerator: . IDENTIFIER
   92           | . IDENTIFIER '=' INT_CONSTANT

    IDENTIFIER  shift, and go to state 57

    enumerator_list  go to state 58
    enumerator       go to state 59


State 45

   98 direct_declarator: IDENTIFIER '(' ')' .

    $default  reduce using rule 98 (direct_declarator)


State 46

   94 declarator2: . direct_declarator
   95 direct_declarator: . IDENTIFIER
   96                  | . '(' declarator2 ')'
   97                  | . IDENTIFIER '(' parameter_list ')'
   98                  | . IDENTIFIER '(' ')'
  101 parameter_declaration: type_specifier . declarator2

    IDENTIFIER  shift, and go to state 22
    '('         shift, and go to state 23

    declarator2        go to state 60
    direct_declarator  go to state 28


State 47

   97 direct_declarator: IDENTIFIER '(' parameter_list . ')'
  100 parameter_list: parameter_list . ',' parameter_declaration

    ')'  shift, and go to state 61
    ','  shift, and go to state 62


State 48

   99 parameter_list: parameter_declaration .

    $default  reduce using rule 99 (parameter_list)


State 49

   96 direct_declarator: '(' declarator2 ')' .

    $default  reduce using rule 96 (direct_declarator)


State 50

   76 init_declarator_list: init_declarator_list ',' init_declarator .

    $default  reduce using rule 76 (init_declarator_list)


State 51

   93 declarator: declarator2 .

    $default  reduce using rule 93 (declarator)


State 52

    1 identifier_expression: . IDENTIFIER
    2 primary_expression: . identifier_expression
    3                   | . INT_CONSTANT
    4                   | . FLOAT_CONSTANT
    5                   | . '(' expression ')'
    6 postfix_expression: . primary_expression
    7                   | . ABS '(' expression ')'
    8                   | . SIGN '(' expression ')'
    9                   | . SQRT '(' expression ')'
   10                   | . IDENTIFIER '(' ')'
   11                   | . IDENTIFIER '(' argument_expression_list ')'
   12                   | . COMPARE '(' expression ',' expression ')'
   15 unary_expression: . postfix_expression
   16                 | . unary_operator postfix_expression
   17 unary_operator: . '+'
   18               | . '-'
   19               | . '!'
   20 cast_expression: . unary_expression
   21 multiplicative_expression: . cast_expression
   22                          | . multiplicative_expression binary_op_kind_mul cast_expression
   25 additive_expression: . multiplicative_expression
   26                    | . additive_expression binary_op_kind_add multiplicative_expression
   29 relational_expression: . additive_expression
   30                      | . relational_expression binary_op_kind_rel additive_expression
   35 equality_expression: . relational_expression
   36                    | . equality_expression EQ_OP relational_expression
   37                    | . equality_expression NE_OP relational_expression
   38 logical_and_expression: . equality_expression
   39                       | . logical_and_expression AND_OP equality_expression
   40 logical_or_expression: . logical_and_expression
   41                      | . logical_or_expression OR_OP logical_and_expression
   42 conditional_expression: . logical_or_expression
   43                       | . logical_or_expression '?' expression ':' conditional_expression
   44 assignment_expression: . conditional_expression
   45                      | . unary_expression assignment_operator assignment_expression
   79 init_declarator: declarator '=' $@2 . initializer
   80 initializer: . assignment_expression

    SIGN            shift, and go to state 63
    ABS             shift, and go to state 64
    SQRT            shift, and go to state 65
    COMPARE         shift, and go to state 66
    INT_CONSTANT    shift, and go to state 67
    FLOAT_CONSTANT  shift, and go to state 68
    IDENTIFIER      shift, and go to state 69
    '('             shift, and go to state 70
    '+'             shift, and go to state 71
    '-'             shift, and go to state 72
    '!'             shift, and go to state 73

    identifier_expression      go to state 74
    primary_expression         go to state 75
    postfix_expression         go to state 76
    unary_expression           go to state 77
    unary_operator             go to state 78
    cast_expression            go to state 79
    multiplicative_expression  go to state 80
    additive_expression        go to state 81
    relational_expression      go to state 82
    equality_expression        go to state 83
    logical_and_expression     go to state 84
    logical_or_expression      go to state 85
    conditional_expression     go to state 86
    assignment_expression      go to state 87
    initializer                go to state 88


State 53

  103 group_options: '[' . DEGREE '=' INT_CONSTANT ']'

    DEGREE  shift, and go to state 89


State 54

  104 group_var_list: . IDENTIFIER
  105               | . group_var_list IDENTIFIER
  106 single_group: GROUP group_options . group_var_list ';'

    IDENTIFIER  shift, and go to state 90

    group_var_list  go to state 91


State 55

  108 group_definition2: group_definition single_group .

    $default  reduce using rule 108 (group_definition2)


State 56

   64 compound_statement: . '{' '}'
   66                   | . '{' $@1 statement_list '}'
  112 function_definition: declaration_specifiers declarator2 group_definition @4 . compound_statement

    '{'  shift, and go to state 92

    compound_statement  go to state 93


State 57

   91 enumerator: IDENTIFIER .  [',', '}']
   92           | IDENTIFIER . '=' INT_CONSTANT

    '='  shift, and go to state 94

    $default  reduce using rule 91 (enumerator)


State 58

   88 enum_specifier: ENUM IDENTIFIER $@3 '{' enumerator_list . '}'
   90 enumerator_list: enumerator_list . ',' enumerator

    ','  shift, and go to state 95
    '}'  shift, and go to state 96


State 59

   89 enumerator_list: enumerator .

    $default  reduce using rule 89 (enumerator_list)


State 60

  101 parameter_declaration: type_specifier declarator2 .

    $default  reduce using rule 101 (parameter_declaration)


State 61

   97 direct_declarator: IDENTIFIER '(' parameter_list ')' .

    $default  reduce using rule 97 (direct_declarator)


State 62

   81 type_specifier: . VOID
   82               | . INT
   83               | . FLOAT
   84               | . DOUBLE
   85               | . BOOL
   86               | . USER_TYPE
  100 parameter_list: parameter_list ',' . parameter_declaration
  101 parameter_declaration: . type_specifier declarator2

    INT        shift, and go to state 1
    FLOAT      shift, and go to state 2
    DOUBLE     shift, and go to state 3
    VOID       shift, and go to state 4
    BOOL       shift, and go to state 7
    USER_TYPE  shift, and go to state 11

    type_specifier         go to state 46
    parameter_declaration  go to state 97


State 63

    8 postfix_expression: SIGN . '(' expression ')'

    '('  shift, and go to state 98


State 64

    7 postfix_expression: ABS . '(' expression ')'

    '('  shift, and go to state 99


State 65

    9 postfix_expression: SQRT . '(' expression ')'

    '('  shift, and go to state 100


State 66

   12 postfix_expression: COMPARE . '(' expression ',' expression ')'

    '('  shift, and go to state 101


State 67

    3 primary_expression: INT_CONSTANT .

    $default  reduce using rule 3 (primary_expression)


State 68

    4 primary_expression: FLOAT_CONSTANT .

    $default  reduce using rule 4 (primary_expression)


State 69

    1 identifier_expression: IDENTIFIER .  [LE_OP, GE_OP, EQ_OP, NE_OP, AND_OP, OR_OP, MUL_ASSIGN, DIV_ASSIGN, MOD_ASSIGN, ADD_ASSIGN, SUB_ASSIGN, AND_ASSIGN, XOR_ASSIGN, OR_ASSIGN, ')', ',', '+', '-', '*', '/', '<', '>', '?', ':', '=', ';']
   10 postfix_expression: IDENTIFIER . '(' ')'
   11                   | IDENTIFIER . '(' argument_expression_list ')'

    '('  shift, and go to state 102

    $default  reduce using rule 1 (identifier_expression)


State 70

    1 identifier_expression: . IDENTIFIER
    2 primary_expression: . identifier_expression
    3                   | . INT_CONSTANT
    4                   | . FLOAT_CONSTANT
    5                   | . '(' expression ')'
    5                   | '(' . expression ')'
    6 postfix_expression: . primary_expression
    7                   | . ABS '(' expression ')'
    8                   | . SIGN '(' expression ')'
    9                   | . SQRT '(' expression ')'
   10                   | . IDENTIFIER '(' ')'
   11                   | . IDENTIFIER '(' argument_expression_list ')'
   12                   | . COMPARE '(' expression ',' expression ')'
   15 unary_expression: . postfix_expression
   16                 | . unary_operator postfix_expression
   17 unary_operator: . '+'
   18               | . '-'
   19               | . '!'
   20 cast_expression: . unary_expression
   21 multiplicative_expression: . cast_expression
   22                          | . multiplicative_expression binary_op_kind_mul cast_expression
   25 additive_expression: . multiplicative_expression
   26                    | . additive_expression binary_op_kind_add multiplicative_expression
   29 relational_expression: . additive_expression
   30                      | . relational_expression binary_op_kind_rel additive_expression
   35 equality_expression: . relational_expression
   36                    | . equality_expression EQ_OP relational_expression
   37                    | . equality_expression NE_OP relational_expression
   38 logical_and_expression: . equality_expression
   39                       | . logical_and_expression AND_OP equality_expression
   40 logical_or_expression: . logical_and_expression
   41                      | . logical_or_expression OR_OP logical_and_expression
   42 conditional_expression: . logical_or_expression
   43                       | . logical_or_expression '?' expression ':' conditional_expression
   55 expression: . conditional_expression

    SIGN            shift, and go to state 63
    ABS             shift, and go to state 64
    SQRT            shift, and go to state 65
    COMPARE         shift, and go to state 66
    INT_CONSTANT    shift, and go to state 67
    FLOAT_CONSTANT  shift, and go to state 68
    IDENTIFIER      shift, and go to state 69
    '('             shift, and go to state 70
    '+'             shift, and go to state 71
    '-'             shift, and go to state 72
    '!'             shift, and go to state 73

    identifier_expression      go to state 74
    primary_expression         go to state 75
    postfix_expression         go to state 76
    unary_expression           go to state 103
    unary_operator             go to state 78
    cast_expression            go to state 79
    multiplicative_expression  go to state 80
    additive_expression        go to state 81
    relational_expression      go to state 82
    equality_expression        go to state 83
    logical_and_expression     go to state 84
    logical_or_expression      go to state 85
    conditional_expression     go to state 104
    expression                 go to state 105


State 71

   17 unary_operator: '+' .

    $default  reduce using rule 17 (unary_operator)


State 72

   18 unary_operator: '-' .

    $default  reduce using rule 18 (unary_operator)


State 73

   19 unary_operator: '!' .

    $default  reduce using rule 19 (unary_operator)


State 74

    2 primary_expression: identifier_expression .

    $default  reduce using rule 2 (primary_expression)


State 75

    6 postfix_expression: primary_expression .

    $default  reduce using rule 6 (postfix_expression)


State 76

   15 unary_expression: postfix_expression .

    $default  reduce using rule 15 (unary_expression)


State 77

   20 cast_expression: unary_expression .  [LE_OP, GE_OP, EQ_OP, NE_OP, AND_OP, OR_OP, ',', '+', '-', '*', '/', '<', '>', '?', ';']
   45 assignment_expression: unary_expression . assignment_operator assignment_expression
   46 assignment_operator: . '='
   47                    | . MUL_ASSIGN
   48                    | . DIV_ASSIGN
   49                    | . MOD_ASSIGN
   50                    | . ADD_ASSIGN
   51                    | . SUB_ASSIGN
   52                    | . AND_ASSIGN
   53                    | . XOR_ASSIGN
   54                    | . OR_ASSIGN

    MUL_ASSIGN  shift, and go to state 106
    DIV_ASSIGN  shift, and go to state 107
    MOD_ASSIGN  shift, and go to state 108
    ADD_ASSIGN  shift, and go to state 109
    SUB_ASSIGN  shift, and go to state 110
    AND_ASSIGN  shift, and go to state 111
    XOR_ASSIGN  shift, and go to state 112
    OR_ASSIGN   shift, and go to state 113
    '='         shift, and go to state 114

    $default  reduce using rule 20 (cast_expression)

    assignment_operator  go to state 115


State 78

    1 identifier_expression: . IDENTIFIER
    2 primary_expression: . identifier_expression
    3                   | . INT_CONSTANT
    4                   | . FLOAT_CONSTANT
    5                   | . '(' expression ')'
    6 postfix_expression: . primary_expression
    7                   | . ABS '(' expression ')'
    8                   | . SIGN '(' expression ')'
    9                   | . SQRT '(' expression ')'
   10                   | . IDENTIFIER '(' ')'
   11                   | . IDENTIFIER '(' argument_expression_list ')'
   12                   | . COMPARE '(' expression ',' expression ')'
   16 unary_expression: unary_operator . postfix_expression

    SIGN            shift, and go to state 63
    ABS             shift, and go to state 64
    SQRT            shift, and go to state 65
    COMPARE         shift, and go to state 66
    INT_CONSTANT    shift, and go to state 67
    FLOAT_CONSTANT  shift, and go to state 68
    IDENTIFIER      shift, and go to state 69
    '('             shift, and go to state 70

    identifier_expression  go to state 74
    primary_expression     go to state 75
    postfix_expression     go to state 116


State 79

   21 multiplicative_expression: cast_expression .

    $default  reduce using rule 21 (multiplicative_expression)


State 80

   22 multiplicative_expression: multiplicative_expression . binary_op_kind_mul cast_expression
   23 binary_op_kind_mul: . '*'
   24                   | . '/'
   25 additive_expression: multiplicative_expression .  [LE_OP, GE_OP, EQ_OP, NE_OP, AND_OP, OR_OP, ')', ',', '+', '-', '<', '>', '?', ':', ';']

    '*'  shift, and go to state 117
    '/'  shift, and go to state 118

    $default  reduce using rule 25 (additive_expression)

    binary_op_kind_mul  go to state 119


State 81

   26 additive_expression: additive_expression . binary_op_kind_add multiplicative_expression
   27 binary_op_kind_add: . '+'
   28                   | . '-'
   29 relational_expression: additive_expression .  [LE_OP, GE_OP, EQ_OP, NE_OP, AND_OP, OR_OP, ')', ',', '<', '>', '?', ':', ';']

    '+'  shift, and go to state 120
    '-'  shift, and go to state 121

    $default  reduce using rule 29 (relational_expression)

    binary_op_kind_add  go to state 122


State 82

   30 relational_expression: relational_expression . binary_op_kind_rel additive_expression
   31 binary_op_kind_rel: . '<'
   32                   | . '>'
   33                   | . LE_OP
   34                   | . GE_OP
   35 equality_expression: relational_expression .  [EQ_OP, NE_OP, AND_OP, OR_OP, ')', ',', '?', ':', ';']

    LE_OP  shift, and go to state 123
    GE_OP  shift, and go to state 124
    '<'    shift, and go to state 125
    '>'    shift, and go to state 126

    $default  reduce using rule 35 (equality_expression)

    binary_op_kind_rel  go to state 127


State 83

   36 equality_expression: equality_expression . EQ_OP relational_expression
   37                    | equality_expression . NE_OP relational_expression
   38 logical_and_expression: equality_expression .  [AND_OP, OR_OP, ')', ',', '?', ':', ';']

    EQ_OP  shift, and go to state 128
    NE_OP  shift, and go to state 129

    $default  reduce using rule 38 (logical_and_expression)


State 84

   39 logical_and_expression: logical_and_expression . AND_OP equality_expression
   40 logical_or_expression: logical_and_expression .  [OR_OP, ')', ',', '?', ':', ';']

    AND_OP  shift, and go to state 130

    $default  reduce using rule 40 (logical_or_expression)


State 85

   41 logical_or_expression: logical_or_expression . OR_OP logical_and_expression
   42 conditional_expression: logical_or_expression .  [')', ',', ':', ';']
   43                       | logical_or_expression . '?' expression ':' conditional_expression

    OR_OP  shift, and go to state 131
    '?'    shift, and go to state 132

    $default  reduce using rule 42 (conditional_expression)


State 86

   44 assignment_expression: conditional_expression .

    $default  reduce using rule 44 (assignment_expression)


State 87

   80 initializer: assignment_expression .

    $default  reduce using rule 80 (initializer)


State 88

   79 init_declarator: declarator '=' $@2 initializer .

    $default  reduce using rule 79 (init_declarator)


State 89

  103 group_options: '[' DEGREE . '=' INT_CONSTANT ']'

    '='  shift, and go to state 133


State 90

  104 group_var_list: IDENTIFIER .

    $default  reduce using rule 104 (group_var_list)


State 91

  105 group_var_list: group_var_list . IDENTIFIER
  106 single_group: GROUP group_options group_var_list . ';'

    IDENTIFIER  shift, and go to state 134
    ';'         shift, and go to state 135


State 92

   64 compound_statement: '{' . '}'
   65 $@1: . %empty  [INT, FLOAT, DOUBLE, VOID, TYPEDEF, BOOL, IF, RETURN, SIGN, ABS, SQRT, COMPARE, ENUM, INT_CONSTANT, FLOAT_CONSTANT, IDENTIFIER, USER_TYPE, '(', '+', '-', '!', '{']
   66 compound_statement: '{' . $@1 statement_list '}'

    '}'  shift, and go to state 136

    $default  reduce using rule 65 ($@1)

    $@1  go to state 137


State 93

  112 function_definition: declaration_specifiers declarator2 group_definition @4 compound_statement .

    $default  reduce using rule 112 (function_definition)


State 94

   92 enumerator: IDENTIFIER '=' . INT_CONSTANT

    INT_CONSTANT  shift, and go to state 138


State 95

   90 enumerator_list: enumerator_list ',' . enumerator
   91 enumerator: . IDENTIFIER
   92           | . IDENTIFIER '=' INT_CONSTANT

    IDENTIFIER  shift, and go to state 57

    enumerator  go to state 139


State 96

   88 enum_specifier: ENUM IDENTIFIER $@3 '{' enumerator_list '}' .

    $default  reduce using rule 88 (enum_specifier)


State 97

  100 parameter_list: parameter_list ',' parameter_declaration .

    $default  reduce using rule 100 (parameter_list)


State 98

    1 identifier_expression: . IDENTIFIER
    2 primary_expression: . identifier_expression
    3                   | . INT_CONSTANT
    4                   | . FLOAT_CONSTANT
    5                   | . '(' expression ')'
    6 postfix_expression: . primary_expression
    7                   | . ABS '(' expression ')'
    8                   | . SIGN '(' expression ')'
    8                   | SIGN '(' . expression ')'
    9                   | . SQRT '(' expression ')'
   10                   | . IDENTIFIER '(' ')'
   11                   | . IDENTIFIER '(' argument_expression_list ')'
   12                   | . COMPARE '(' expression ',' expression ')'
   15 unary_expression: . postfix_expression
   16                 | . unary_operator postfix_expression
   17 unary_operator: . '+'
   18               | . '-'
   19               | . '!'
   20 cast_expression: . unary_expression
   21 multiplicative_expression: . cast_expression
   22                          | . multiplicative_expression binary_op_kind_mul cast_expression
   25 additive_expression: . multiplicative_expression
   26                    | . additive_expression binary_op_kind_add multiplicative_expression
   29 relational_expression: . additive_expression
   30                      | . relational_expression binary_op_kind_rel additive_expression
   35 equality_expression: . relational_expression
   36                    | . equality_expression EQ_OP relational_expression
   37                    | . equality_expression NE_OP relational_expression
   38 logical_and_expression: . equality_expression
   39                       | . logical_and_expression AND_OP equality_expression
   40 logical_or_expression: . logical_and_expression
   41                      | . logical_or_expression OR_OP logical_and_expression
   42 conditional_expression: . logical_or_expression
   43                       | . logical_or_expression '?' expression ':' conditional_expression
   55 expression: . conditional_expression

    SIGN            shift, and go to state 63
    ABS             shift, and go to state 64
    SQRT            shift, and go to state 65
    COMPARE         shift, and go to state 66
    INT_CONSTANT    shift, and go to state 67
    FLOAT_CONSTANT  shift, and go to state 68
    IDENTIFIER      shift, and go to state 69
    '('             shift, and go to state 70
    '+'             shift, and go to state 71
    '-'             shift, and go to state 72
    '!'             shift, and go to state 73

    identifier_expression      go to state 74
    primary_expression         go to state 75
    postfix_expression         go to state 76
    unary_expression           go to state 103
    unary_operator             go to state 78
    cast_expression            go to state 79
    multiplicative_expression  go to state 80
    additive_expression        go to state 81
    relational_expression      go to state 82
    equality_expression        go to state 83
    logical_and_expression     go to state 84
    logical_or_expression      go to state 85
    conditional_expression     go to state 104
    expression                 go to state 140


State 99

    1 identifier_expression: . IDENTIFIER
    2 primary_expression: . identifier_expression
    3                   | . INT_CONSTANT
    4                   | . FLOAT_CONSTANT
    5                   | . '(' expression ')'
    6 postfix_expression: . primary_expression
    7                   | . ABS '(' expression ')'
    7                   | ABS '(' . expression ')'
    8                   | . SIGN '(' expression ')'
    9                   | . SQRT '(' expression ')'
   10                   | . IDENTIFIER '(' ')'
   11                   | . IDENTIFIER '(' argument_expression_list ')'
   12                   | . COMPARE '(' expression ',' expression ')'
   15 unary_expression: . postfix_expression
   16                 | . unary_operator postfix_expression
   17 unary_operator: . '+'
   18               | . '-'
   19               | . '!'
   20 cast_expression: . unary_expression
   21 multiplicative_expression: . cast_expression
   22                          | . multiplicative_expression binary_op_kind_mul cast_expression
   25 additive_expression: . multiplicative_expression
   26                    | . additive_expression binary_op_kind_add multiplicative_expression
   29 relational_expression: . additive_expression
   30                      | . relational_expression binary_op_kind_rel additive_expression
   35 equality_expression: . relational_expression
   36                    | . equality_expression EQ_OP relational_expression
   37                    | . equality_expression NE_OP relational_expression
   38 logical_and_expression: . equality_expression
   39                       | . logical_and_expression AND_OP equality_expression
   40 logical_or_expression: . logical_and_expression
   41                      | . logical_or_expression OR_OP logical_and_expression
   42 conditional_expression: . logical_or_expression
   43                       | . logical_or_expression '?' expression ':' conditional_expression
   55 expression: . conditional_expression

    SIGN            shift, and go to state 63
    ABS             shift, and go to state 64
    SQRT            shift, and go to state 65
    COMPARE         shift, and go to state 66
    INT_CONSTANT    shift, and go to state 67
    FLOAT_CONSTANT  shift, and go to state 68
    IDENTIFIER      shift, and go to state 69
    '('             shift, and go to state 70
    '+'             shift, and go to state 71
    '-'             shift, and go to state 72
    '!'             shift, and go to state 73

    identifier_expression      go to state 74
    primary_expression         go to state 75
    postfix_expression         go to state 76
    unary_expression           go to state 103
    unary_operator             go to state 78
    cast_expression            go to state 79
    multiplicative_expression  go to state 80
    additive_expression        go to state 81
    relational_expression      go to state 82
    equality_expression        go to state 83
    logical_and_expression     go to state 84
    logical_or_expression      go to state 85
    conditional_expression     go to state 104
    expression                 go to state 141


State 100

    1 identifier_expression: . IDENTIFIER
    2 primary_expression: . identifier_expression
    3                   | . INT_CONSTANT
    4                   | . FLOAT_CONSTANT
    5                   | . '(' expression ')'
    6 postfix_expression: . primary_expression
    7                   | . ABS '(' expression ')'
    8                   | . SIGN '(' expression ')'
    9                   | . SQRT '(' expression ')'
    9                   | SQRT '(' . expression ')'
   10                   | . IDENTIFIER '(' ')'
   11                   | . IDENTIFIER '(' argument_expression_list ')'
   12                   | . COMPARE '(' expression ',' expression ')'
   15 unary_expression: . postfix_expression
   16                 | . unary_operator postfix_expression
   17 unary_operator: . '+'
   18               | . '-'
   19               | . '!'
   20 cast_expression: . unary_expression
   21 multiplicative_expression: . cast_expression
   22                          | . multiplicative_expression binary_op_kind_mul cast_expression
   25 additive_expression: . multiplicative_expression
   26                    | . additive_expression binary_op_kind_add multiplicative_expression
   29 relational_expression: . additive_expression
   30                      | . relational_expression binary_op_kind_rel additive_expression
   35 equality_expression: . relational_expression
   36                    | . equality_expression EQ_OP relational_expression
   37                    | . equality_expression NE_OP relational_expression
   38 logical_and_expression: . equality_expression
   39                       | . logical_and_expression AND_OP equality_expression
   40 logical_or_expression: . logical_and_expression
   41                      | . logical_or_expression OR_OP logical_and_expression
   42 conditional_expression: . logical_or_expression
   43                       | . logical_or_expression '?' expression ':' conditional_expression
   55 expression: . conditional_expression

    SIGN            shift, and go to state 63
    ABS             shift, and go to state 64
    SQRT            shift, and go to state 65
    COMPARE         shift, and go to state 66
    INT_CONSTANT    shift, and go to state 67
    FLOAT_CONSTANT  shift, and go to state 68
    IDENTIFIER      shift, and go to state 69
    '('             shift, and go to state 70
    '+'             shift, and go to state 71
    '-'             shift, and go to state 72
    '!'             shift, and go to state 73

    identifier_expression      go to state 74
    primary_expression         go to state 75
    postfix_expression         go to state 76
    unary_expression           go to state 103
    unary_operator             go to state 78
    cast_expression            go to state 79
    multiplicative_expression  go to state 80
    additive_expression        go to state 81
    relational_expression      go to state 82
    equality_expression        go to state 83
    logical_and_expression     go to state 84
    logical_or_expression      go to state 85
    conditional_expression     go to state 104
    expression                 go to state 142


State 101

    1 identifier_expression: . IDENTIFIER
    2 primary_expression: . identifier_expression
    3                   | . INT_CONSTANT
    4                   | . FLOAT_CONSTANT
    5                   | . '(' expression ')'
    6 postfix_expression: . primary_expression
    7                   | . ABS '(' expression ')'
    8                   | . SIGN '(' expression ')'
    9                   | . SQRT '(' expression ')'
   10                   | . IDENTIFIER '(' ')'
   11                   | . IDENTIFIER '(' argument_expression_list ')'
   12                   | . COMPARE '(' expression ',' expression ')'
   12                   | COMPARE '(' . expression ',' expression ')'
   15 unary_expression: . postfix_expression
   16                 | . unary_operator postfix_expression
   17 unary_operator: . '+'
   18               | . '-'
   19               | . '!'
   20 cast_expression: . unary_expression
   21 multiplicative_expression: . cast_expression
   22                          | . multiplicative_expression binary_op_kind_mul cast_expression
   25 additive_expression: . multiplicative_expression
   26                    | . additive_expression binary_op_kind_add multiplicative_expression
   29 relational_expression: . additive_expression
   30                      | . relational_expression binary_op_kind_rel additive_expression
   35 equality_expression: . relational_expression
   36                    | . equality_expression EQ_OP relational_expression
   37                    | . equality_expression NE_OP relational_expression
   38 logical_and_expression: . equality_expression
   39                       | . logical_and_expression AND_OP equality_expression
   40 logical_or_expression: . logical_and_expression
   41                      | . logical_or_expression OR_OP logical_and_expression
   42 conditional_expression: . logical_or_expression
   43                       | . logical_or_expression '?' expression ':' conditional_expression
   55 expression: . conditional_expression

    SIGN            shift, and go to state 63
    ABS             shift, and go to state 64
    SQRT            shift, and go to state 65
    COMPARE         shift, and go to state 66
    INT_CONSTANT    shift, and go to state 67
    FLOAT_CONSTANT  shift, and go to state 68
    IDENTIFIER      shift, and go to state 69
    '('             shift, and go to state 70
    '+'             shift, and go to state 71
    '-'             shift, and go to state 72
    '!'             shift, and go to state 73

    identifier_expression      go to state 74
    primary_expression         go to state 75
    postfix_expression         go to state 76
    unary_expression           go to state 103
    unary_operator             go to state 78
    cast_expression            go to state 79
    multiplicative_expression  go to state 80
    additive_expression        go to state 81
    relational_expression      go to state 82
    equality_expression        go to state 83
    logical_and_expression     go to state 84
    logical_or_expression      go to state 85
    conditional_expression     go to state 104
    expression                 go to state 143


State 102

    1 identifier_expression: . IDENTIFIER
    2 primary_expression: . identifier_expression
    3                   | . INT_CONSTANT
    4                   | . FLOAT_CONSTANT
    5                   | . '(' expression ')'
    6 postfix_expression: . primary_expression
    7                   | . ABS '(' expression ')'
    8                   | . SIGN '(' expression ')'
    9                   | . SQRT '(' expression ')'
   10                   | . IDENTIFIER '(' ')'
   10                   | IDENTIFIER '(' . ')'
   11                   | . IDENTIFIER '(' argument_expression_list ')'
   11                   | IDENTIFIER '(' . argument_expression_list ')'
   12                   | . COMPARE '(' expression ',' expression ')'
   13 argument_expression_list: . expression
   14                         | . argument_expression_list ',' expression
   15 unary_expression: . postfix_expression
   16                 | . unary_operator postfix_expression
   17 unary_operator: . '+'
   18               | . '-'
   19               | . '!'
   20 cast_expression: . unary_expression
   21 multiplicative_expression: . cast_expression
   22                          | . multiplicative_expression binary_op_kind_mul cast_expression
   25 additive_expression: . multiplicative_expression
   26                    | . additive_expression binary_op_kind_add multiplicative_expression
   29 relational_expression: . additive_expression
   30                      | . relational_expression binary_op_kind_rel additive_expression
   35 equality_expression: . relational_expression
   36                    | . equality_expression EQ_OP relational_expression
   37                    | . equality_expression NE_OP relational_expression
   38 logical_and_expression: . equality_expression
   39                       | . logical_and_expression AND_OP equality_expression
   40 logical_or_expression: . logical_and_expression
   41                      | . logical_or_expression OR_OP logical_and_expression
   42 conditional_expression: . logical_or_expression
   43                       | . logical_or_expression '?' expression ':' conditional_expression
   55 expression: . conditional_expression

    SIGN            shift, and go to state 63
    ABS             shift, and go to state 64
    SQRT            shift, and go to state 65
    COMPARE         shift, and go to state 66
    INT_CONSTANT    shift, and go to state 67
    FLOAT_CONSTANT  shift, and go to state 68
    IDENTIFIER      shift, and go to state 69
    '('             shift, and go to state 70
    ')'             shift, and go to state 144
    '+'             shift, and go to state 71
    '-'             shift, and go to state 72
    '!'             shift, and go to state 73

    identifier_expression      go to state 74
    primary_expression         go to state 75
    postfix_expression         go to state 76
    argument_expression_list   go to state 145
    unary_expression           go to state 103
    unary_operator             go to state 78
    cast_expression            go to state 79
    multiplicative_expression  go to state 80
    additive_expression        go to state 81
    relational_expression      go to state 82
    equality_expression        go to state 83
    logical_and_expression     go to state 84
    logical_or_expression      go to state 85
    conditional_expression     go to state 104
    expression                 go to state 146


State 103

   20 cast_expression: unary_expression .

    $default  reduce using rule 20 (cast_expression)


State 104

   55 expression: conditional_expression .

    $default  reduce using rule 55 (expression)


State 105

    5 primary_expression: '(' expression . ')'

    ')'  shift, and go to state 147


State 106

   47 assignment_operator: MUL_ASSIGN .

    $default  reduce using rule 47 (assignment_operator)


State 107

   48 assignment_operator: DIV_ASSIGN .

    $default  reduce using rule 48 (assignment_operator)


State 108

   49 assignment_operator: MOD_ASSIGN .

    $default  reduce using rule 49 (assignment_operator)


State 109

   50 assignment_operator: ADD_ASSIGN .

    $default  reduce using rule 50 (assignment_operator)


State 110

   51 assignment_operator: SUB_ASSIGN .

    $default  reduce using rule 51 (assignment_operator)


State 111

   52 assignment_operator: AND_ASSIGN .

    $default  reduce using rule 52 (assignment_operator)


State 112

   53 assignment_operator: XOR_ASSIGN .

    $default  reduce using rule 53 (assignment_operator)


State 113

   54 assignment_operator: OR_ASSIGN .

    $default  reduce using rule 54 (assignment_operator)


State 114

   46 assignment_operator: '=' .

    $default  reduce using rule 46 (assignment_operator)


State 115

    1 identifier_expression: . IDENTIFIER
    2 primary_expression: . identifier_expression
    3                   | . INT_CONSTANT
    4                   | . FLOAT_CONSTANT
    5                   | . '(' expression ')'
    6 postfix_expression: . primary_expression
    7                   | . ABS '(' expression ')'
    8                   | . SIGN '(' expression ')'
    9                   | . SQRT '(' expression ')'
   10                   | . IDENTIFIER '(' ')'
   11                   | . IDENTIFIER '(' argument_expression_list ')'
   12                   | . COMPARE '(' expression ',' expression ')'
   15 unary_expression: . postfix_expression
   16                 | . unary_operator postfix_expression
   17 unary_operator: . '+'
   18               | . '-'
   19               | . '!'
   20 cast_expression: . unary_expression
   21 multiplicative_expression: . cast_expression
   22                          | . multiplicative_expression binary_op_kind_mul cast_expression
   25 additive_expression: . multiplicative_expression
   26                    | . additive_expression binary_op_kind_add multiplicative_expression
   29 relational_expression: . additive_expression
   30                      | . relational_expression binary_op_kind_rel additive_expression
   35 equality_expression: . relational_expression
   36                    | . equality_expression EQ_OP relational_expression
   37                    | . equality_expression NE_OP relational_expression
   38 logical_and_expression: . equality_expression
   39                       | . logical_and_expression AND_OP equality_expression
   40 logical_or_expression: . logical_and_expression
   41                      | . logical_or_expression OR_OP logical_and_expression
   42 conditional_expression: . logical_or_expression
   43                       | . logical_or_expression '?' expression ':' conditional_expression
   44 assignment_expression: . conditional_expression
   45                      | . unary_expression assignment_operator assignment_expression
   45                      | unary_expression assignment_operator . assignment_expression

    SIGN            shift, and go to state 63
    ABS             shift, and go to state 64
    SQRT            shift, and go to state 65
    COMPARE         shift, and go to state 66
    INT_CONSTANT    shift, and go to state 67
    FLOAT_CONSTANT  shift, and go to state 68
    IDENTIFIER      shift, and go to state 69
    '('             shift, and go to state 70
    '+'             shift, and go to state 71
    '-'             shift, and go to state 72
    '!'             shift, and go to state 73

    identifier_expression      go to state 74
    primary_expression         go to state 75
    postfix_expression         go to state 76
    unary_expression           go to state 77
    unary_operator             go to state 78
    cast_expression            go to state 79
    multiplicative_expression  go to state 80
    additive_expression        go to state 81
    relational_expression      go to state 82
    equality_expression        go to state 83
    logical_and_expression     go to state 84
    logical_or_expression      go to state 85
    conditional_expression     go to state 86
    assignment_expression      go to state 148


State 116

   16 unary_expression: unary_operator postfix_expression .

    $default  reduce using rule 16 (unary_expression)


State 117

   23 binary_op_kind_mul: '*' .

    $default  reduce using rule 23 (binary_op_kind_mul)


State 118

   24 binary_op_kind_mul: '/' .

    $default  reduce using rule 24 (binary_op_kind_mul)


State 119

    1 identifier_expression: . IDENTIFIER
    2 primary_expression: . identifier_expression
    3                   | . INT_CONSTANT
    4                   | . FLOAT_CONSTANT
    5                   | . '(' expression ')'
    6 postfix_expression: . primary_expression
    7                   | . ABS '(' expression ')'
    8                   | . SIGN '(' expression ')'
    9                   | . SQRT '(' expression ')'
   10                   | . IDENTIFIER '(' ')'
   11                   | . IDENTIFIER '(' argument_expression_list ')'
   12                   | . COMPARE '(' expression ',' expression ')'
   15 unary_expression: . postfix_expression
   16                 | . unary_operator postfix_expression
   17 unary_operator: . '+'
   18               | . '-'
   19               | . '!'
   20 cast_expression: . unary_expression
   22 multiplicative_expression: multiplicative_expression binary_op_kind_mul . cast_expression

    SIGN            shift, and go to state 63
    ABS             shift, and go to state 64
    SQRT            shift, and go to state 65
    COMPARE         shift, and go to state 66
    INT_CONSTANT    shift, and go to state 67
    FLOAT_CONSTANT  shift, and go to state 68
    IDENTIFIER      shift, and go to state 69
    '('             shift, and go to state 70
    '+'             shift, and go to state 71
    '-'             shift, and go to state 72
    '!'             shift, and go to state 73

    identifier_expression  go to state 74
    primary_expression     go to state 75
    postfix_expression     go to state 76
    unary_expression       go to state 103
    unary_operator         go to state 78
    cast_expression        go to state 149


State 120

   27 binary_op_kind_add: '+' .

    $default  reduce using rule 27 (binary_op_kind_add)


State 121

   28 binary_op_kind_add: '-' .

    $default  reduce using rule 28 (binary_op_kind_add)


State 122

    1 identifier_expression: . IDENTIFIER
    2 primary_expression: . identifier_expression
    3                   | . INT_CONSTANT
    4                   | . FLOAT_CONSTANT
    5                   | . '(' expression ')'
    6 postfix_expression: . primary_expression
    7                   | . ABS '(' expression ')'
    8                   | . SIGN '(' expression ')'
    9                   | . SQRT '(' expression ')'
   10                   | . IDENTIFIER '(' ')'
   11                   | . IDENTIFIER '(' argument_expression_list ')'
   12                   | . COMPARE '(' expression ',' expression ')'
   15 unary_expression: . postfix_expression
   16                 | . unary_operator postfix_expression
   17 unary_operator: . '+'
   18               | . '-'
   19               | . '!'
   20 cast_expression: . unary_expression
   21 multiplicative_expression: . cast_expression
   22                          | . multiplicative_expression binary_op_kind_mul cast_expression
   26 additive_expression: additive_expression binary_op_kind_add . multiplicative_expression

    SIGN            shift, and go to state 63
    ABS             shift, and go to state 64
    SQRT            shift, and go to state 65
    COMPARE         shift, and go to state 66
    INT_CONSTANT    shift, and go to state 67
    FLOAT_CONSTANT  shift, and go to state 68
    IDENTIFIER      shift, and go to state 69
    '('             shift, and go to state 70
    '+'             shift, and go to state 71
    '-'             shift, and go to state 72
    '!'             shift, and go to state 73

    identifier_expression      go to state 74
    primary_expression         go to state 75
    postfix_expression         go to state 76
    unary_expression           go to state 103
    unary_operator             go to state 78
    cast_expression            go to state 79
    multiplicative_expression  go to state 150


State 123

   33 binary_op_kind_rel: LE_OP .

    $default  reduce using rule 33 (binary_op_kind_rel)


State 124

   34 binary_op_kind_rel: GE_OP .

    $default  reduce using rule 34 (binary_op_kind_rel)


State 125

   31 binary_op_kind_rel: '<' .

    $default  reduce using rule 31 (binary_op_kind_rel)


State 126

   32 binary_op_kind_rel: '>' .

    $default  reduce using rule 32 (binary_op_kind_rel)


State 127

    1 identifier_expression: . IDENTIFIER
    2 primary_expression: . identifier_expression
    3                   | . INT_CONSTANT
    4                   | . FLOAT_CONSTANT
    5                   | . '(' expression ')'
    6 postfix_expression: . primary_expression
    7                   | . ABS '(' expression ')'
    8                   | . SIGN '(' expression ')'
    9                   | . SQRT '(' expression ')'
   10                   | . IDENTIFIER '(' ')'
   11                   | . IDENTIFIER '(' argument_expression_list ')'
   12                   | . COMPARE '(' expression ',' expression ')'
   15 unary_expression: . postfix_expression
   16                 | . unary_operator postfix_expression
   17 unary_operator: . '+'
   18               | . '-'
   19               | . '!'
   20 cast_expression: . unary_expression
   21 multiplicative_expression: . cast_expression
   22                          | . multiplicative_expression binary_op_kind_mul cast_expression
   25 additive_expression: . multiplicative_expression
   26                    | . additive_expression binary_op_kind_add multiplicative_expression
   30 relational_expression: relational_expression binary_op_kind_rel . additive_expression

    SIGN            shift, and go to state 63
    ABS             shift, and go to state 64
    SQRT            shift, and go to state 65
    COMPARE         shift, and go to state 66
    INT_CONSTANT    shift, and go to state 67
    FLOAT_CONSTANT  shift, and go to state 68
    IDENTIFIER      shift, and go to state 69
    '('             shift, and go to state 70
    '+'             shift, and go to state 71
    '-'             shift, and go to state 72
    '!'             shift, and go to state 73

    identifier_expression      go to state 74
    primary_expression         go to state 75
    postfix_expression         go to state 76
    unary_expression           go to state 103
    unary_operator             go to state 78
    cast_expression            go to state 79
    multiplicative_expression  go to state 80
    additive_expression        go to state 151


State 128

    1 identifier_expression: . IDENTIFIER
    2 primary_expression: . identifier_expression
    3                   | . INT_CONSTANT
    4                   | . FLOAT_CONSTANT
    5                   | . '(' expression ')'
    6 postfix_expression: . primary_expression
    7                   | . ABS '(' expression ')'
    8                   | . SIGN '(' expression ')'
    9                   | . SQRT '(' expression ')'
   10                   | . IDENTIFIER '(' ')'
   11                   | . IDENTIFIER '(' argument_expression_list ')'
   12                   | . COMPARE '(' expression ',' expression ')'
   15 unary_expression: . postfix_expression
   16                 | . unary_operator postfix_expression
   17 unary_operator: . '+'
   18               | . '-'
   19               | . '!'
   20 cast_expression: . unary_expression
   21 multiplicative_expression: . cast_expression
   22                          | . multiplicative_expression binary_op_kind_mul cast_expression
   25 additive_expression: . multiplicative_expression
   26                    | . additive_expression binary_op_kind_add multiplicative_expression
   29 relational_expression: . additive_expression
   30                      | . relational_expression binary_op_kind_rel additive_expression
   36 equality_expression: equality_expression EQ_OP . relational_expression

    SIGN            shift, and go to state 63
    ABS             shift, and go to state 64
    SQRT            shift, and go to state 65
    COMPARE         shift, and go to state 66
    INT_CONSTANT    shift, and go to state 67
    FLOAT_CONSTANT  shift, and go to state 68
    IDENTIFIER      shift, and go to state 69
    '('             shift, and go to state 70
    '+'             shift, and go to state 71
    '-'             shift, and go to state 72
    '!'             shift, and go to state 73

    identifier_expression      go to state 74
    primary_expression         go to state 75
    postfix_expression         go to state 76
    unary_expression           go to state 103
    unary_operator             go to state 78
    cast_expression            go to state 79
    multiplicative_expression  go to state 80
    additive_expression        go to state 81
    relational_expression      go to state 152


State 129

    1 identifier_expression: . IDENTIFIER
    2 primary_expression: . identifier_expression
    3                   | . INT_CONSTANT
    4                   | . FLOAT_CONSTANT
    5                   | . '(' expression ')'
    6 postfix_expression: . primary_expression
    7                   | . ABS '(' expression ')'
    8                   | . SIGN '(' expression ')'
    9                   | . SQRT '(' expression ')'
   10                   | . IDENTIFIER '(' ')'
   11                   | . IDENTIFIER '(' argument_expression_list ')'
   12                   | . COMPARE '(' expression ',' expression ')'
   15 unary_expression: . postfix_expression
   16                 | . unary_operator postfix_expression
   17 unary_operator: . '+'
   18               | . '-'
   19               | . '!'
   20 cast_expression: . unary_expression
   21 multiplicative_expression: . cast_expression
   22                          | . multiplicative_expression binary_op_kind_mul cast_expression
   25 additive_expression: . multiplicative_expression
   26                    | . additive_expression binary_op_kind_add multiplicative_expression
   29 relational_expression: . additive_expression
   30                      | . relational_expression binary_op_kind_rel additive_expression
   37 equality_expression: equality_expression NE_OP . relational_expression

    SIGN            shift, and go to state 63
    ABS             shift, and go to state 64
    SQRT            shift, and go to state 65
    COMPARE         shift, and go to state 66
    INT_CONSTANT    shift, and go to state 67
    FLOAT_CONSTANT  shift, and go to state 68
    IDENTIFIER      shift, and go to state 69
    '('             shift, and go to state 70
    '+'             shift, and go to state 71
    '-'             shift, and go to state 72
    '!'             shift, and go to state 73

    identifier_expression      go to state 74
    primary_expression         go to state 75
    postfix_expression         go to state 76
    unary_expression           go to state 103
    unary_operator             go to state 78
    cast_expression            go to state 79
    multiplicative_expression  go to state 80
    additive_expression        go to state 81
    relational_expression      go to state 153


State 130

    1 identifier_expression: . IDENTIFIER
    2 primary_expression: . identifier_expression
    3                   | . INT_CONSTANT
    4                   | . FLOAT_CONSTANT
    5                   | . '(' expression ')'
    6 postfix_expression: . primary_expression
    7                   | . ABS '(' expression ')'
    8                   | . SIGN '(' expression ')'
    9                   | . SQRT '(' expression ')'
   10                   | . IDENTIFIER '(' ')'
   11                   | . IDENTIFIER '(' argument_expression_list ')'
   12                   | . COMPARE '(' expression ',' expression ')'
   15 unary_expression: . postfix_expression
   16                 | . unary_operator postfix_expression
   17 unary_operator: . '+'
   18               | . '-'
   19               | . '!'
   20 cast_expression: . unary_expression
   21 multiplicative_expression: . cast_expression
   22                          | . multiplicative_expression binary_op_kind_mul cast_expression
   25 additive_expression: . multiplicative_expression
   26                    | . additive_expression binary_op_kind_add multiplicative_expression
   29 relational_expression: . additive_expression
   30                      | . relational_expression binary_op_kind_rel additive_expression
   35 equality_expression: . relational_expression
   36                    | . equality_expression EQ_OP relational_expression
   37                    | . equality_expression NE_OP relational_expression
   39 logical_and_expression: logical_and_expression AND_OP . equality_expression

    SIGN            shift, and go to state 63
    ABS             shift, and go to state 64
    SQRT            shift, and go to state 65
    COMPARE         shift, and go to state 66
    INT_CONSTANT    shift, and go to state 67
    FLOAT_CONSTANT  shift, and go to state 68
    IDENTIFIER      shift, and go to state 69
    '('             shift, and go to state 70
    '+'             shift, and go to state 71
    '-'             shift, and go to state 72
    '!'             shift, and go to state 73

    identifier_expression      go to state 74
    primary_expression         go to state 75
    postfix_expression         go to state 76
    unary_expression           go to state 103
    unary_operator             go to state 78
    cast_expression            go to state 79
    multiplicative_expression  go to state 80
    additive_expression        go to state 81
    relational_expression      go to state 82
    equality_expression        go to state 154


State 131

    1 identifier_expression: . IDENTIFIER
    2 primary_expression: . identifier_expression
    3                   | . INT_CONSTANT
    4                   | . FLOAT_CONSTANT
    5                   | . '(' expression ')'
    6 postfix_expression: . primary_expression
    7                   | . ABS '(' expression ')'
    8                   | . SIGN '(' expression ')'
    9                   | . SQRT '(' expression ')'
   10                   | . IDENTIFIER '(' ')'
   11                   | . IDENTIFIER '(' argument_expression_list ')'
   12                   | . COMPARE '(' expression ',' expression ')'
   15 unary_expression: . postfix_expression
   16                 | . unary_operator postfix_expression
   17 unary_operator: . '+'
   18               | . '-'
   19               | . '!'
   20 cast_expression: . unary_expression
   21 multiplicative_expression: . cast_expression
   22                          | . multiplicative_expression binary_op_kind_mul cast_expression
   25 additive_expression: . multiplicative_expression
   26                    | . additive_expression binary_op_kind_add multiplicative_expression
   29 relational_expression: . additive_expression
   30                      | . relational_expression binary_op_kind_rel additive_expression
   35 equality_expression: . relational_expression
   36                    | . equality_expression EQ_OP relational_expression
   37                    | . equality_expression NE_OP relational_expression
   38 logical_and_expression: . equality_expression
   39                       | . logical_and_expression AND_OP equality_expression
   41 logical_or_expression: logical_or_expression OR_OP . logical_and_expression

    SIGN            shift, and go to state 63
    ABS             shift, and go to state 64
    SQRT            shift, and go to state 65
    COMPARE         shift, and go to state 66
    INT_CONSTANT    shift, and go to state 67
    FLOAT_CONSTANT  shift, and go to state 68
    IDENTIFIER      shift, and go to state 69
    '('             shift, and go to state 70
    '+'             shift, and go to state 71
    '-'             shift, and go to state 72
    '!'             shift, and go to state 73

    identifier_expression      go to state 74
    primary_expression         go to state 75
    postfix_expression         go to state 76
    unary_expression           go to state 103
    unary_operator             go to state 78
    cast_expression            go to state 79
    multiplicative_expression  go to state 80
    additive_expression        go to state 81
    relational_expression      go to state 82
    equality_expression        go to state 83
    logical_and_expression     go to state 155


State 132

    1 identifier_expression: . IDENTIFIER
    2 primary_expression: . identifier_expression
    3                   | . INT_CONSTANT
    4                   | . FLOAT_CONSTANT
    5                   | . '(' expression ')'
    6 postfix_expression: . primary_expression
    7                   | . ABS '(' expression ')'
    8                   | . SIGN '(' expression ')'
    9                   | . SQRT '(' expression ')'
   10                   | . IDENTIFIER '(' ')'
   11                   | . IDENTIFIER '(' argument_expression_list ')'
   12                   | . COMPARE '(' expression ',' expression ')'
   15 unary_expression: . postfix_expression
   16                 | . unary_operator postfix_expression
   17 unary_operator: . '+'
   18               | . '-'
   19               | . '!'
   20 cast_expression: . unary_expression
   21 multiplicative_expression: . cast_expression
   22                          | . multiplicative_expression binary_op_kind_mul cast_expression
   25 additive_expression: . multiplicative_expression
   26                    | . additive_expression binary_op_kind_add multiplicative_expression
   29 relational_expression: . additive_expression
   30                      | . relational_expression binary_op_kind_rel additive_expression
   35 equality_expression: . relational_expression
   36                    | . equality_expression EQ_OP relational_expression
   37                    | . equality_expression NE_OP relational_expression
   38 logical_and_expression: . equality_expression
   39                       | . logical_and_expression AND_OP equality_expression
   40 logical_or_expression: . logical_and_expression
   41                      | . logical_or_expression OR_OP logical_and_expression
   42 conditional_expression: . logical_or_expression
   43                       | . logical_or_expression '?' expression ':' conditional_expression
   43                       | logical_or_expression '?' . expression ':' conditional_expression
   55 expression: . conditional_expression

    SIGN            shift, and go to state 63
    ABS             shift, and go to state 64
    SQRT            shift, and go to state 65
    COMPARE         shift, and go to state 66
    INT_CONSTANT    shift, and go to state 67
    FLOAT_CONSTANT  shift, and go to state 68
    IDENTIFIER      shift, and go to state 69
    '('             shift, and go to state 70
    '+'             shift, and go to state 71
    '-'             shift, and go to state 72
    '!'             shift, and go to state 73

    identifier_expression      go to state 74
    primary_expression         go to state 75
    postfix_expression         go to state 76
    unary_expression           go to state 103
    unary_operator             go to state 78
    cast_expression            go to state 79
    multiplicative_expression  go to state 80
    additive_expression        go to state 81
    relational_expression      go to state 82
    equality_expression        go to state 83
    logical_and_expression     go to state 84
    logical_or_expression      go to state 85
    conditional_expression     go to state 104
    expression                 go to state 156


State 133

  103 group_options: '[' DEGREE '=' . INT_CONSTANT ']'

    INT_CONSTANT  shift, and go to state 157


State 134

  105 group_var_list: group_var_list IDENTIFIER .

    $default  reduce using rule 105 (group_var_list)


State 135

  106 single_group: GROUP group_options group_var_list ';' .

    $default  reduce using rule 106 (single_group)


State 136

   64 compound_statement: '{' '}' .

    $default  reduce using rule 64 (compound_statement)


State 137

    1 identifier_expression: . IDENTIFIER
    2 primary_expression: . identifier_expression
    3                   | . INT_CONSTANT
    4                   | . FLOAT_CONSTANT
    5                   | . '(' expression ')'
    6 postfix_expression: . primary_expression
    7                   | . ABS '(' expression ')'
    8                   | . SIGN '(' expression ')'
    9                   | . SQRT '(' expression ')'
   10                   | . IDENTIFIER '(' ')'
   11                   | . IDENTIFIER '(' argument_expression_list ')'
   12                   | . COMPARE '(' expression ',' expression ')'
   15 unary_expression: . postfix_expression
   16                 | . unary_operator postfix_expression
   17 unary_operator: . '+'
   18               | . '-'
   19               | . '!'
   20 cast_expression: . unary_expression
   21 multiplicative_expression: . cast_expression
   22                          | . multiplicative_expression binary_op_kind_mul cast_expression
   25 additive_expression: . multiplicative_expression
   26                    | . additive_expression binary_op_kind_add multiplicative_expression
   29 relational_expression: . additive_expression
   30                      | . relational_expression binary_op_kind_rel additive_expression
   35 equality_expression: . relational_expression
   36                    | . equality_expression EQ_OP relational_expression
   37                    | . equality_expression NE_OP relational_expression
   38 logical_and_expression: . equality_expression
   39                       | . logical_and_expression AND_OP equality_expression
   40 logical_or_expression: . logical_and_expression
   41                      | . logical_or_expression OR_OP logical_and_expression
   42 conditional_expression: . logical_or_expression
   43                       | . logical_or_expression '?' expression ':' conditional_expression
   44 assignment_expression: . conditional_expression
   45                      | . unary_expression assignment_operator assignment_expression
   56 statement: . compound_statement
   57          | . declaration
   58          | . conditional_statement
   59          | . expression_statement
   60          | . jump_statement
   61 statement_list: . statement
   62               | . statement_list statement
   63 expression_statement: . assignment_expression ';'
   64 compound_statement: . '{' '}'
   66                   | . '{' $@1 statement_list '}'
   66                   | '{' $@1 . statement_list '}'
   67 conditional_statement: . IF '(' expression ')' statement
   68                      | . IF '(' expression ')' statement ELSE statement
   69 jump_statement: . RETURN ';'
   70               | . RETURN expression ';'
   71 declaration: . declaration_specifiers init_declarator_list ';'
   72            | . TYPEDEF type_specifier IDENTIFIER ';'
   73            | . enum_specifier ';'
   74 declaration_specifiers: . type_specifier
   81 type_specifier: . VOID
   82               | . INT
   83               | . FLOAT
   84               | . DOUBLE
   85               | . BOOL
   86               | . USER_TYPE
   88 enum_specifier: . ENUM IDENTIFIER $@3 '{' enumerator_list '}'

    INT             shift, and go to state 1
    FLOAT           shift, and go to state 2
    DOUBLE          shift, and go to state 3
    VOID            shift, and go to state 4
    TYPEDEF         shift, and go to state 5
    BOOL            shift, and go to state 7
    IF              shift, and go to state 158
    RETURN          shift, and go to state 159
    SIGN            shift, and go to state 63
    ABS             shift, and go to state 64
    SQRT            shift, and go to state 65
    COMPARE         shift, and go to state 66
    ENUM            shift, and go to state 8
    INT_CONSTANT    shift, and go to state 67
    FLOAT_CONSTANT  shift, and go to state 68
    IDENTIFIER      shift, and go to state 69
    USER_TYPE       shift, and go to state 11
    '('             shift, and go to state 70
    '+'             shift, and go to state 71
    '-'             shift, and go to state 72
    '!'             shift, and go to state 73
    '{'             shift, and go to state 92

    identifier_expression      go to state 74
    primary_expression         go to state 75
    postfix_expression         go to state 76
    unary_expression           go to state 77
    unary_operator             go to state 78
    cast_expression            go to state 79
    multiplicative_expression  go to state 80
    additive_expression        go to state 81
    relational_expression      go to state 82
    equality_expression        go to state 83
    logical_and_expression     go to state 84
    logical_or_expression      go to state 85
    conditional_expression     go to state 86
    assignment_expression      go to state 160
    statement                  go to state 161
    statement_list             go to state 162
    expression_statement       go to state 163
    compound_statement         go to state 164
    conditional_statement      go to state 165
    jump_statement             go to state 166
    declaration                go to state 167
    declaration_specifiers     go to state 168
    type_specifier             go to state 14
    enum_specifier             go to state 15


State 138

   92 enumerator: IDENTIFIER '=' INT_CONSTANT .

    $default  reduce using rule 92 (enumerator)


State 139

   90 enumerator_list: enumerator_list ',' enumerator .

    $default  reduce using rule 90 (enumerator_list)


State 140

    8 postfix_expression: SIGN '(' expression . ')'

    ')'  shift, and go to state 169


State 141

    7 postfix_expression: ABS '(' expression . ')'

    ')'  shift, and go to state 170


State 142

    9 postfix_expression: SQRT '(' expression . ')'

    ')'  shift, and go to state 171


State 143

   12 postfix_expression: COMPARE '(' expression . ',' expression ')'

    ','  shift, and go to state 172


State 144

   10 postfix_expression: IDENTIFIER '(' ')' .

    $default  reduce using rule 10 (postfix_expression)


State 145

   11 postfix_expression: IDENTIFIER '(' argument_expression_list . ')'
   14 argument_expression_list: argument_expression_list . ',' expression

    ')'  shift, and go to state 173
    ','  shift, and go to state 174


State 146

   13 argument_expression_list: expression .

    $default  reduce using rule 13 (argument_expression_list)


State 147

    5 primary_expression: '(' expression ')' .

    $default  reduce using rule 5 (primary_expression)


State 148

   45 assignment_expression: unary_expression assignment_operator assignment_expression .

    $default  reduce using rule 45 (assignment_expression)


State 149

   22 multiplicative_expression: multiplicative_expression binary_op_kind_mul cast_expression .

    $default  reduce using rule 22 (multiplicative_expression)


State 150

   22 multiplicative_expression: multiplicative_expression . binary_op_kind_mul cast_expression
   23 binary_op_kind_mul: . '*'
   24                   | . '/'
   26 additive_expression: additive_expression binary_op_kind_add multiplicative_expression .  [LE_OP, GE_OP, EQ_OP, NE_OP, AND_OP, OR_OP, ')', ',', '+', '-', '<', '>', '?', ':', ';']

    '*'  shift, and go to state 117
    '/'  shift, and go to state 118

    $default  reduce using rule 26 (additive_expression)

    binary_op_kind_mul  go to state 119


State 151

   26 additive_expression: additive_expression . binary_op_kind_add multiplicative_expression
   27 binary_op_kind_add: . '+'
   28                   | . '-'
   30 relational_expression: relational_expression binary_op_kind_rel additive_expression .  [LE_OP, GE_OP, EQ_OP, NE_OP, AND_OP, OR_OP, ')', ',', '<', '>', '?', ':', ';']

    '+'  shift, and go to state 120
    '-'  shift, and go to state 121

    $default  reduce using rule 30 (relational_expression)

    binary_op_kind_add  go to state 122


State 152

   30 relational_expression: relational_expression . binary_op_kind_rel additive_expression
   31 binary_op_kind_rel: . '<'
   32                   | . '>'
   33                   | . LE_OP
   34                   | . GE_OP
   36 equality_expression: equality_expression EQ_OP relational_expression .  [EQ_OP, NE_OP, AND_OP, OR_OP, ')', ',', '?', ':', ';']

    LE_OP  shift, and go to state 123
    GE_OP  shift, and go to state 124
    '<'    shift, and go to state 125
    '>'    shift, and go to state 126

    $default  reduce using rule 36 (equality_expression)

    binary_op_kind_rel  go to state 127


State 153

   30 relational_expression: relational_expression . binary_op_kind_rel additive_expression
   31 binary_op_kind_rel: . '<'
   32                   | . '>'
   33                   | . LE_OP
   34                   | . GE_OP
   37 equality_expression: equality_expression NE_OP relational_expression .  [EQ_OP, NE_OP, AND_OP, OR_OP, ')', ',', '?', ':', ';']

    LE_OP  shift, and go to state 123
    GE_OP  shift, and go to state 124
    '<'    shift, and go to state 125
    '>'    shift, and go to state 126

    $default  reduce using rule 37 (equality_expression)

    binary_op_kind_rel  go to state 127


State 154

   36 equality_expression: equality_expression . EQ_OP relational_expression
   37                    | equality_expression . NE_OP relational_expression
   39 logical_and_expression: logical_and_expression AND_OP equality_expression .  [AND_OP, OR_OP, ')', ',', '?', ':', ';']

    EQ_OP  shift, and go to state 128
    NE_OP  shift, and go to state 129

    $default  reduce using rule 39 (logical_and_expression)


State 155

   39 logical_and_expression: logical_and_expression . AND_OP equality_expression
   41 logical_or_expression: logical_or_expression OR_OP logical_and_expression .  [OR_OP, ')', ',', '?', ':', ';']

    AND_OP  shift, and go to state 130

    $default  reduce using rule 41 (logical_or_expression)


State 156

   43 conditional_expression: logical_or_expression '?' expression . ':' conditional_expression

    ':'  shift, and go to state 175


State 157

  103 group_options: '[' DEGREE '=' INT_CONSTANT . ']'

    ']'  shift, and go to state 176


State 158

   67 conditional_statement: IF . '(' expression ')' statement
   68                      | IF . '(' expression ')' statement ELSE statement

    '('  shift, and go to state 177


State 159

    1 identifier_expression: . IDENTIFIER
    2 primary_expression: . identifier_expression
    3                   | . INT_CONSTANT
    4                   | . FLOAT_CONSTANT
    5                   | . '(' expression ')'
    6 postfix_expression: . primary_expression
    7                   | . ABS '(' expression ')'
    8                   | . SIGN '(' expression ')'
    9                   | . SQRT '(' expression ')'
   10                   | . IDENTIFIER '(' ')'
   11                   | . IDENTIFIER '(' argument_expression_list ')'
   12                   | . COMPARE '(' expression ',' expression ')'
   15 unary_expression: . postfix_expression
   16                 | . unary_operator postfix_expression
   17 unary_operator: . '+'
   18               | . '-'
   19               | . '!'
   20 cast_expression: . unary_expression
   21 multiplicative_expression: . cast_expression
   22                          | . multiplicative_expression binary_op_kind_mul cast_expression
   25 additive_expression: . multiplicative_expression
   26                    | . additive_expression binary_op_kind_add multiplicative_expression
   29 relational_expression: . additive_expression
   30                      | . relational_expression binary_op_kind_rel additive_expression
   35 equality_expression: . relational_expression
   36                    | . equality_expression EQ_OP relational_expression
   37                    | . equality_expression NE_OP relational_expression
   38 logical_and_expression: . equality_expression
   39                       | . logical_and_expression AND_OP equality_expression
   40 logical_or_expression: . logical_and_expression
   41                      | . logical_or_expression OR_OP logical_and_expression
   42 conditional_expression: . logical_or_expression
   43                       | . logical_or_expression '?' expression ':' conditional_expression
   55 expression: . conditional_expression
   69 jump_statement: RETURN . ';'
   70               | RETURN . expression ';'

    SIGN            shift, and go to state 63
    ABS             shift, and go to state 64
    SQRT            shift, and go to state 65
    COMPARE         shift, and go to state 66
    INT_CONSTANT    shift, and go to state 67
    FLOAT_CONSTANT  shift, and go to state 68
    IDENTIFIER      shift, and go to state 69
    '('             shift, and go to state 70
    '+'             shift, and go to state 71
    '-'             shift, and go to state 72
    '!'             shift, and go to state 73
    ';'             shift, and go to state 178

    identifier_expression      go to state 74
    primary_expression         go to state 75
    postfix_expression         go to state 76
    unary_expression           go to state 103
    unary_operator             go to state 78
    cast_expression            go to state 79
    multiplicative_expression  go to state 80
    additive_expression        go to state 81
    relational_expression      go to state 82
    equality_expression        go to state 83
    logical_and_expression     go to state 84
    logical_or_expression      go to state 85
    conditional_expression     go to state 104
    expression                 go to state 179


State 160

   63 expression_statement: assignment_expression . ';'

    ';'  shift, and go to state 180


State 161

   61 statement_list: statement .

    $default  reduce using rule 61 (statement_list)


State 162

    1 identifier_expression: . IDENTIFIER
    2 primary_expression: . identifier_expression
    3                   | . INT_CONSTANT
    4                   | . FLOAT_CONSTANT
    5                   | . '(' expression ')'
    6 postfix_expression: . primary_expression
    7                   | . ABS '(' expression ')'
    8                   | . SIGN '(' expression ')'
    9                   | . SQRT '(' expression ')'
   10                   | . IDENTIFIER '(' ')'
   11                   | . IDENTIFIER '(' argument_expression_list ')'
   12                   | . COMPARE '(' expression ',' expression ')'
   15 unary_expression: . postfix_expression
   16                 | . unary_operator postfix_expression
   17 unary_operator: . '+'
   18               | . '-'
   19               | . '!'
   20 cast_expression: . unary_expression
   21 multiplicative_expression: . cast_expression
   22                          | . multiplicative_expression binary_op_kind_mul cast_expression
   25 additive_expression: . multiplicative_expression
   26                    | . additive_expression binary_op_kind_add multiplicative_expression
   29 relational_expression: . additive_expression
   30                      | . relational_expression binary_op_kind_rel additive_expression
   35 equality_expression: . relational_expression
   36                    | . equality_expression EQ_OP relational_expression
   37                    | . equality_expression NE_OP relational_expression
   38 logical_and_expression: . equality_expression
   39                       | . logical_and_expression AND_OP equality_expression
   40 logical_or_expression: . logical_and_expression
   41                      | . logical_or_expression OR_OP logical_and_expression
   42 conditional_expression: . logical_or_expression
   43                       | . logical_or_expression '?' expression ':' conditional_expression
   44 assignment_expression: . conditional_expression
   45                      | . unary_expression assignment_operator assignment_expression
   56 statement: . compound_statement
   57          | . declaration
   58          | . conditional_statement
   59          | . expression_statement
   60          | . jump_statement
   62 statement_list: statement_list . statement
   63 expression_statement: . assignment_expression ';'
   64 compound_statement: . '{' '}'
   66                   | . '{' $@1 statement_list '}'
   66                   | '{' $@1 statement_list . '}'
   67 conditional_statement: . IF '(' expression ')' statement
   68                      | . IF '(' expression ')' statement ELSE statement
   69 jump_statement: . RETURN ';'
   70               | . RETURN expression ';'
   71 declaration: . declaration_specifiers init_declarator_list ';'
   72            | . TYPEDEF type_specifier IDENTIFIER ';'
   73            | . enum_specifier ';'
   74 declaration_specifiers: . type_specifier
   81 type_specifier: . VOID
   82               | . INT
   83               | . FLOAT
   84               | . DOUBLE
   85               | . BOOL
   86               | . USER_TYPE
   88 enum_specifier: . ENUM IDENTIFIER $@3 '{' enumerator_list '}'

    INT             shift, and go to state 1
    FLOAT           shift, and go to state 2
    DOUBLE          shift, and go to state 3
    VOID            shift, and go to state 4
    TYPEDEF         shift, and go to state 5
    BOOL            shift, and go to state 7
    IF              shift, and go to state 158
    RETURN          shift, and go to state 159
    SIGN            shift, and go to state 63
    ABS             shift, and go to state 64
    SQRT            shift, and go to state 65
    COMPARE         shift, and go to state 66
    ENUM            shift, and go to state 8
    INT_CONSTANT    shift, and go to state 67
    FLOAT_CONSTANT  shift, and go to state 68
    IDENTIFIER      shift, and go to state 69
    USER_TYPE       shift, and go to state 11
    '('             shift, and go to state 70
    '+'             shift, and go to state 71
    '-'             shift, and go to state 72
    '!'             shift, and go to state 73
    '{'             shift, and go to state 92
    '}'             shift, and go to state 181

    identifier_expression      go to state 74
    primary_expression         go to state 75
    postfix_expression         go to state 76
    unary_expression           go to state 77
    unary_operator             go to state 78
    cast_expression            go to state 79
    multiplicative_expression  go to state 80
    additive_expression        go to state 81
    relational_expression      go to state 82
    equality_expression        go to state 83
    logical_and_expression     go to state 84
    logical_or_expression      go to state 85
    conditional_expression     go to state 86
    assignment_expression      go to state 160
    statement                  go to state 182
    expression_statement       go to state 163
    compound_statement         go to state 164
    conditional_statement      go to state 165
    jump_statement             go to state 166
    declaration                go to state 167
    declaration_specifiers     go to state 168
    type_specifier             go to state 14
    enum_specifier             go to state 15


State 163

   59 statement: expression_statement .

    $default  reduce using rule 59 (statement)


State 164

   56 statement: compound_statement .

    $default  reduce using rule 56 (statement)


State 165

   58 statement: conditional_statement .

    $default  reduce using rule 58 (statement)


State 166

   60 statement: jump_statement .

    $default  reduce using rule 60 (statement)


State 167

   57 statement: declaration .

    $default  reduce using rule 57 (statement)


State 168

   71 declaration: declaration_specifiers . init_declarator_list ';'
   75 init_declarator_list: . init_declarator
   76                     | . init_declarator_list ',' init_declarator
   77 init_declarator: . declarator
   79                | . declarator '=' $@2 initializer
   93 declarator: . declarator2
   94 declarator2: . direct_declarator
   95 direct_declarator: . IDENTIFIER
   96                  | . '(' declarator2 ')'
   97                  | . IDENTIFIER '(' parameter_list ')'
   98                  | . IDENTIFIER '(' ')'

    IDENTIFIER  shift, and go to state 22
    '('         shift, and go to state 23

    init_declarator_list  go to state 24
    init_declarator       go to state 25
    declarator            go to state 26
    declarator2           go to state 51
    direct_declarator     go to state 28


State 169

    8 postfix_expression: SIGN '(' expression ')' .

    $default  reduce using rule 8 (postfix_expression)


State 170

    7 postfix_expression: ABS '(' expression ')' .

    $default  reduce using rule 7 (postfix_expression)


State 171

    9 postfix_expression: SQRT '(' expression ')' .

    $default  reduce using rule 9 (postfix_expression)


State 172

    1 identifier_expression: . IDENTIFIER
    2 primary_expression: . identifier_expression
    3                   | . INT_CONSTANT
    4                   | . FLOAT_CONSTANT
    5                   | . '(' expression ')'
    6 postfix_expression: . primary_expression
    7                   | . ABS '(' expression ')'
    8                   | . SIGN '(' expression ')'
    9                   | . SQRT '(' expression ')'
   10                   | . IDENTIFIER '(' ')'
   11                   | . IDENTIFIER '(' argument_expression_list ')'
   12                   | . COMPARE '(' expression ',' expression ')'
   12                   | COMPARE '(' expression ',' . expression ')'
   15 unary_expression: . postfix_expression
   16                 | . unary_operator postfix_expression
   17 unary_operator: . '+'
   18               | . '-'
   19               | . '!'
   20 cast_expression: . unary_expression
   21 multiplicative_expression: . cast_expression
   22                          | . multiplicative_expression binary_op_kind_mul cast_expression
   25 additive_expression: . multiplicative_expression
   26                    | . additive_expression binary_op_kind_add multiplicative_expression
   29 relational_expression: . additive_expression
   30                      | . relational_expression binary_op_kind_rel additive_expression
   35 equality_expression: . relational_expression
   36                    | . equality_expression EQ_OP relational_expression
   37                    | . equality_expression NE_OP relational_expression
   38 logical_and_expression: . equality_expression
   39                       | . logical_and_expression AND_OP equality_expression
   40 logical_or_expression: . logical_and_expression
   41                      | . logical_or_expression OR_OP logical_and_expression
   42 conditional_expression: . logical_or_expression
   43                       | . logical_or_expression '?' expression ':' conditional_expression
   55 expression: . conditional_expression

    SIGN            shift, and go to state 63
    ABS             shift, and go to state 64
    SQRT            shift, and go to state 65
    COMPARE         shift, and go to state 66
    INT_CONSTANT    shift, and go to state 67
    FLOAT_CONSTANT  shift, and go to state 68
    IDENTIFIER      shift, and go to state 69
    '('             shift, and go to state 70
    '+'             shift, and go to state 71
    '-'             shift, and go to state 72
    '!'             shift, and go to state 73

    identifier_expression      go to state 74
    primary_expression         go to state 75
    postfix_expression         go to state 76
    unary_expression           go to state 103
    unary_operator             go to state 78
    cast_expression            go to state 79
    multiplicative_expression  go to state 80
    additive_expression        go to state 81
    relational_expression      go to state 82
    equality_expression        go to state 83
    logical_and_expression     go to state 84
    logical_or_expression      go to state 85
    conditional_expression     go to state 104
    expression                 go to state 183


State 173

   11 postfix_expression: IDENTIFIER '(' argument_expression_list ')' .

    $default  reduce using rule 11 (postfix_expression)


State 174

    1 identifier_expression: . IDENTIFIER
    2 primary_expression: . identifier_expression
    3                   | . INT_CONSTANT
    4                   | . FLOAT_CONSTANT
    5                   | . '(' expression ')'
    6 postfix_expression: . primary_expression
    7                   | . ABS '(' expression ')'
    8                   | . SIGN '(' expression ')'
    9                   | . SQRT '(' expression ')'
   10                   | . IDENTIFIER '(' ')'
   11                   | . IDENTIFIER '(' argument_expression_list ')'
   12                   | . COMPARE '(' expression ',' expression ')'
   14 argument_expression_list: argument_expression_list ',' . expression
   15 unary_expression: . postfix_expression
   16                 | . unary_operator postfix_expression
   17 unary_operator: . '+'
   18               | . '-'
   19               | . '!'
   20 cast_expression: . unary_expression
   21 multiplicative_expression: . cast_expression
   22                          | . multiplicative_expression binary_op_kind_mul cast_expression
   25 additive_expression: . multiplicative_expression
   26                    | . additive_expression binary_op_kind_add multiplicative_expression
   29 relational_expression: . additive_expression
   30                      | . relational_expression binary_op_kind_rel additive_expression
   35 equality_expression: . relational_expression
   36                    | . equality_expression EQ_OP relational_expression
   37                    | . equality_expression NE_OP relational_expression
   38 logical_and_expression: . equality_expression
   39                       | . logical_and_expression AND_OP equality_expression
   40 logical_or_expression: . logical_and_expression
   41                      | . logical_or_expression OR_OP logical_and_expression
   42 conditional_expression: . logical_or_expression
   43                       | . logical_or_expression '?' expression ':' conditional_expression
   55 expression: . conditional_expression

    SIGN            shift, and go to state 63
    ABS             shift, and go to state 64
    SQRT            shift, and go to state 65
    COMPARE         shift, and go to state 66
    INT_CONSTANT    shift, and go to state 67
    FLOAT_CONSTANT  shift, and go to state 68
    IDENTIFIER      shift, and go to state 69
    '('             shift, and go to state 70
    '+'             shift, and go to state 71
    '-'             shift, and go to state 72
    '!'             shift, and go to state 73

    identifier_expression      go to state 74
    primary_expression         go to state 75
    postfix_expression         go to state 76
    unary_expression           go to state 103
    unary_operator             go to state 78
    cast_expression            go to state 79
    multiplicative_expression  go to state 80
    additive_expression        go to state 81
    relational_expression      go to state 82
    equality_expression        go to state 83
    logical_and_expression     go to state 84
    logical_or_expression      go to state 85
    conditional_expression     go to state 104
    expression                 go to state 184


State 175

    1 identifier_expression: . IDENTIFIER
    2 primary_expression: . identifier_expression
    3                   | . INT_CONSTANT
    4                   | . FLOAT_CONSTANT
    5                   | . '(' expression ')'
    6 postfix_expression: . primary_expression
    7                   | . ABS '(' expression ')'
    8                   | . SIGN '(' expression ')'
    9                   | . SQRT '(' expression ')'
   10                   | . IDENTIFIER '(' ')'
   11                   | . IDENTIFIER '(' argument_expression_list ')'
   12                   | . COMPARE '(' expression ',' expression ')'
   15 unary_expression: . postfix_expression
   16                 | . unary_operator postfix_expression
   17 unary_operator: . '+'
   18               | . '-'
   19               | . '!'
   20 cast_expression: . unary_expression
   21 multiplicative_expression: . cast_expression
   22                          | . multiplicative_expression binary_op_kind_mul cast_expression
   25 additive_expression: . multiplicative_expression
   26                    | . additive_expression binary_op_kind_add multiplicative_expression
   29 relational_expression: . additive_expression
   30                      | . relational_expression binary_op_kind_rel additive_expression
   35 equality_expression: . relational_expression
   36                    | . equality_expression EQ_OP relational_expression
   37                    | . equality_expression NE_OP relational_expression
   38 logical_and_expression: . equality_expression
   39                       | . logical_and_expression AND_OP equality_expression
   40 logical_or_expression: . logical_and_expression
   41                      | . logical_or_expression OR_OP logical_and_expression
   42 conditional_expression: . logical_or_expression
   43                       | . logical_or_expression '?' expression ':' conditional_expression
   43                       | logical_or_expression '?' expression ':' . conditional_expression

    SIGN            shift, and go to state 63
    ABS             shift, and go to state 64
    SQRT            shift, and go to state 65
    COMPARE         shift, and go to state 66
    INT_CONSTANT    shift, and go to state 67
    FLOAT_CONSTANT  shift, and go to state 68
    IDENTIFIER      shift, and go to state 69
    '('             shift, and go to state 70
    '+'             shift, and go to state 71
    '-'             shift, and go to state 72
    '!'             shift, and go to state 73

    identifier_expression      go to state 74
    primary_expression         go to state 75
    postfix_expression         go to state 76
    unary_expression           go to state 103
    unary_operator             go to state 78
    cast_expression            go to state 79
    multiplicative_expression  go to state 80
    additive_expression        go to state 81
    relational_expression      go to state 82
    equality_expression        go to state 83
    logical_and_expression     go to state 84
    logical_or_expression      go to state 85
    conditional_expression     go to state 185


State 176

  103 group_options: '[' DEGREE '=' INT_CONSTANT ']' .

    $default  reduce using rule 103 (group_options)


State 177

    1 identifier_expression: . IDENTIFIER
    2 primary_expression: . identifier_expression
    3                   | . INT_CONSTANT
    4                   | . FLOAT_CONSTANT
    5                   | . '(' expression ')'
    6 postfix_expression: . primary_expression
    7                   | . ABS '(' expression ')'
    8                   | . SIGN '(' expression ')'
    9                   | . SQRT '(' expression ')'
   10                   | . IDENTIFIER '(' ')'
   11                   | . IDENTIFIER '(' argument_expression_list ')'
   12                   | . COMPARE '(' expression ',' expression ')'
   15 unary_expression: . postfix_expression
   16                 | . unary_operator postfix_expression
   17 unary_operator: . '+'
   18               | . '-'
   19               | . '!'
   20 cast_expression: . unary_expression
   21 multiplicative_expression: . cast_expression
   22                          | . multiplicative_expression binary_op_kind_mul cast_expression
   25 additive_expression: . multiplicative_expression
   26                    | . additive_expression binary_op_kind_add multiplicative_expression
   29 relational_expression: . additive_expression
   30                      | . relational_expression binary_op_kind_rel additive_expression
   35 equality_expression: . relational_expression
   36                    | . equality_expression EQ_OP relational_expression
   37                    | . equality_expression NE_OP relational_expression
   38 logical_and_expression: . equality_expression
   39                       | . logical_and_expression AND_OP equality_expression
   40 logical_or_expression: . logical_and_expression
   41                      | . logical_or_expression OR_OP logical_and_expression
   42 conditional_expression: . logical_or_expression
   43                       | . logical_or_expression '?' expression ':' conditional_expression
   55 expression: . conditional_expression
   67 conditional_statement: IF '(' . expression ')' statement
   68                      | IF '(' . expression ')' statement ELSE statement

    SIGN            shift, and go to state 63
    ABS             shift, and go to state 64
    SQRT            shift, and go to state 65
    COMPARE         shift, and go to state 66
    INT_CONSTANT    shift, and go to state 67
    FLOAT_CONSTANT  shift, and go to state 68
    IDENTIFIER      shift, and go to state 69
    '('             shift, and go to state 70
    '+'             shift, and go to state 71
    '-'             shift, and go to state 72
    '!'             shift, and go to state 73

    identifier_expression      go to state 74
    primary_expression         go to state 75
    postfix_expression         go to state 76
    unary_expression           go to state 103
    unary_operator             go to state 78
    cast_expression            go to state 79
    multiplicative_expression  go to state 80
    additive_expression        go to state 81
    relational_expression      go to state 82
    equality_expression        go to state 83
    logical_and_expression     go to state 84
    logical_or_expression      go to state 85
    conditional_expression     go to state 104
    expression                 go to state 186


State 178

   69 jump_statement: RETURN ';' .

    $default  reduce using rule 69 (jump_statement)


State 179

   70 jump_statement: RETURN expression . ';'

    ';'  shift, and go to state 187


State 180

   63 expression_statement: assignment_expression ';' .

    $default  reduce using rule 63 (expression_statement)


State 181

   66 compound_statement: '{' $@1 statement_list '}' .

    $default  reduce using rule 66 (compound_statement)


State 182

   62 statement_list: statement_list statement .

    $default  reduce using rule 62 (statement_list)


State 183

   12 postfix_expression: COMPARE '(' expression ',' expression . ')'

    ')'  shift, and go to state 188


State 184

   14 argument_expression_list: argument_expression_list ',' expression .

    $default  reduce using rule 14 (argument_expression_list)


State 185

   43 conditional_expression: logical_or_expression '?' expression ':' conditional_expression .

    $default  reduce using rule 43 (conditional_expression)


State 186

   67 conditional_statement: IF '(' expression . ')' statement
   68                      | IF '(' expression . ')' statement ELSE statement

    ')'  shift, and go to state 189


State 187

   70 jump_statement: RETURN expression ';' .

    $default  reduce using rule 70 (jump_statement)


State 188

   12 postfix_expression: COMPARE '(' expression ',' expression ')' .

    $default  reduce using rule 12 (postfix_expression)


State 189

    1 identifier_expression: . IDENTIFIER
    2 primary_expression: . identifier_expression
    3                   | . INT_CONSTANT
    4                   | . FLOAT_CONSTANT
    5                   | . '(' expression ')'
    6 postfix_expression: . primary_expression
    7                   | . ABS '(' expression ')'
    8                   | . SIGN '(' expression ')'
    9                   | . SQRT '(' expression ')'
   10                   | . IDENTIFIER '(' ')'
   11                   | . IDENTIFIER '(' argument_expression_list ')'
   12                   | . COMPARE '(' expression ',' expression ')'
   15 unary_expression: . postfix_expression
   16                 | . unary_operator postfix_expression
   17 unary_operator: . '+'
   18               | . '-'
   19               | . '!'
   20 cast_expression: . unary_expression
   21 multiplicative_expression: . cast_expression
   22                          | . multiplicative_expression binary_op_kind_mul cast_expression
   25 additive_expression: . multiplicative_expression
   26                    | . additive_expression binary_op_kind_add multiplicative_expression
   29 relational_expression: . additive_expression
   30                      | . relational_expression binary_op_kind_rel additive_expression
   35 equality_expression: . relational_expression
   36                    | . equality_expression EQ_OP relational_expression
   37                    | . equality_expression NE_OP relational_expression
   38 logical_and_expression: . equality_expression
   39                       | . logical_and_expression AND_OP equality_expression
   40 logical_or_expression: . logical_and_expression
   41                      | . logical_or_expression OR_OP logical_and_expression
   42 conditional_expression: . logical_or_expression
   43                       | . logical_or_expression '?' expression ':' conditional_expression
   44 assignment_expression: . conditional_expression
   45                      | . unary_expression assignment_operator assignment_expression
   56 statement: . compound_statement
   57          | . declaration
   58          | . conditional_statement
   59          | . expression_statement
   60          | . jump_statement
   63 expression_statement: . assignment_expression ';'
   64 compound_statement: . '{' '}'
   66                   | . '{' $@1 statement_list '}'
   67 conditional_statement: . IF '(' expression ')' statement
   67                      | IF '(' expression ')' . statement
   68                      | . IF '(' expression ')' statement ELSE statement
   68                      | IF '(' expression ')' . statement ELSE statement
   69 jump_statement: . RETURN ';'
   70               | . RETURN expression ';'
   71 declaration: . declaration_specifiers init_declarator_list ';'
   72            | . TYPEDEF type_specifier IDENTIFIER ';'
   73            | . enum_specifier ';'
   74 declaration_specifiers: . type_specifier
   81 type_specifier: . VOID
   82               | . INT
   83               | . FLOAT
   84               | . DOUBLE
   85               | . BOOL
   86               | . USER_TYPE
   88 enum_specifier: . ENUM IDENTIFIER $@3 '{' enumerator_list '}'

    INT             shift, and go to state 1
    FLOAT           shift, and go to state 2
    DOUBLE          shift, and go to state 3
    VOID            shift, and go to state 4
    TYPEDEF         shift, and go to state 5
    BOOL            shift, and go to state 7
    IF              shift, and go to state 158
    RETURN          shift, and go to state 159
    SIGN            shift, and go to state 63
    ABS             shift, and go to state 64
    SQRT            shift, and go to state 65
    COMPARE         shift, and go to state 66
    ENUM            shift, and go to state 8
    INT_CONSTANT    shift, and go to state 67
    FLOAT_CONSTANT  shift, and go to state 68
    IDENTIFIER      shift, and go to state 69
    USER_TYPE       shift, and go to state 11
    '('             shift, and go to state 70
    '+'             shift, and go to state 71
    '-'             shift, and go to state 72
    '!'             shift, and go to state 73
    '{'             shift, and go to state 92

    identifier_expression      go to state 74
    primary_expression         go to state 75
    postfix_expression         go to state 76
    unary_expression           go to state 77
    unary_operator             go to state 78
    cast_expression            go to state 79
    multiplicative_expression  go to state 80
    additive_expression        go to state 81
    relational_expression      go to state 82
    equality_expression        go to state 83
    logical_and_expression     go to state 84
    logical_or_expression      go to state 85
    conditional_expression     go to state 86
    assignment_expression      go to state 160
    statement                  go to state 190
    expression_statement       go to state 163
    compound_statement         go to state 164
    conditional_statement      go to state 165
    jump_statement             go to state 166
    declaration                go to state 167
    declaration_specifiers     go to state 168
    type_specifier             go to state 14
    enum_specifier             go to state 15


State 190

   67 conditional_statement: IF '(' expression ')' statement .  [INT, FLOAT, DOUBLE, VOID, TYPEDEF, BOOL, IF, ELSE, RETURN, SIGN, ABS, SQRT, COMPARE, ENUM, INT_CONSTANT, FLOAT_CONSTANT, IDENTIFIER, USER_TYPE, '(', '+', '-', '!', '{', '}']
   68                      | IF '(' expression ')' statement . ELSE statement

    ELSE  shift, and go to state 191

    ELSE      [reduce using rule 67 (conditional_statement)]
    $default  reduce using rule 67 (conditional_statement)


State 191

    1 identifier_expression: . IDENTIFIER
    2 primary_expression: . identifier_expression
    3                   | . INT_CONSTANT
    4                   | . FLOAT_CONSTANT
    5                   | . '(' expression ')'
    6 postfix_expression: . primary_expression
    7                   | . ABS '(' expression ')'
    8                   | . SIGN '(' expression ')'
    9                   | . SQRT '(' expression ')'
   10                   | . IDENTIFIER '(' ')'
   11                   | . IDENTIFIER '(' argument_expression_list ')'
   12                   | . COMPARE '(' expression ',' expression ')'
   15 unary_expression: . postfix_expression
   16                 | . unary_operator postfix_expression
   17 unary_operator: . '+'
   18               | . '-'
   19               | . '!'
   20 cast_expression: . unary_expression
   21 multiplicative_expression: . cast_expression
   22                          | . multiplicative_expression binary_op_kind_mul cast_expression
   25 additive_expression: . multiplicative_expression
   26                    | . additive_expression binary_op_kind_add multiplicative_expression
   29 relational_expression: . additive_expression
   30                      | . relational_expression binary_op_kind_rel additive_expression
   35 equality_expression: . relational_expression
   36                    | . equality_expression EQ_OP relational_expression
   37                    | . equality_expression NE_OP relational_expression
   38 logical_and_expression: . equality_expression
   39                       | . logical_and_expression AND_OP equality_expression
   40 logical_or_expression: . logical_and_expression
   41                      | . logical_or_expression OR_OP logical_and_expression
   42 conditional_expression: . logical_or_expression
   43                       | . logical_or_expression '?' expression ':' conditional_expression
   44 assignment_expression: . conditional_expression
   45                      | . unary_expression assignment_operator assignment_expression
   56 statement: . compound_statement
   57          | . declaration
   58          | . conditional_statement
   59          | . expression_statement
   60          | . jump_statement
   63 expression_statement: . assignment_expression ';'
   64 compound_statement: . '{' '}'
   66                   | . '{' $@1 statement_list '}'
   67 conditional_statement: . IF '(' expression ')' statement
   68                      | . IF '(' expression ')' statement ELSE statement
   68                      | IF '(' expression ')' statement ELSE . statement
   69 jump_statement: . RETURN ';'
   70               | . RETURN expression ';'
   71 declaration: . declaration_specifiers init_declarator_list ';'
   72            | . TYPEDEF type_specifier IDENTIFIER ';'
   73            | . enum_specifier ';'
   74 declaration_specifiers: . type_specifier
   81 type_specifier: . VOID
   82               | . INT
   83               | . FLOAT
   84               | . DOUBLE
   85               | . BOOL
   86               | . USER_TYPE
   88 enum_specifier: . ENUM IDENTIFIER $@3 '{' enumerator_list '}'

    INT             shift, and go to state 1
    FLOAT           shift, and go to state 2
    DOUBLE          shift, and go to state 3
    VOID            shift, and go to state 4
    TYPEDEF         shift, and go to state 5
    BOOL            shift, and go to state 7
    IF              shift, and go to state 158
    RETURN          shift, and go to state 159
    SIGN            shift, and go to state 63
    ABS             shift, and go to state 64
    SQRT            shift, and go to state 65
    COMPARE         shift, and go to state 66
    ENUM            shift, and go to state 8
    INT_CONSTANT    shift, and go to state 67
    FLOAT_CONSTANT  shift, and go to state 68
    IDENTIFIER      shift, and go to state 69
    USER_TYPE       shift, and go to state 11
    '('             shift, and go to state 70
    '+'             shift, and go to state 71
    '-'             shift, and go to state 72
    '!'             shift, and go to state 73
    '{'             shift, and go to state 92

    identifier_expression      go to state 74
    primary_expression         go to state 75
    postfix_expression         go to state 76
    unary_expression           go to state 77
    unary_operator             go to state 78
    cast_expression            go to state 79
    multiplicative_expression  go to state 80
    additive_expression        go to state 81
    relational_expression      go to state 82
    equality_expression        go to state 83
    logical_and_expression     go to state 84
    logical_or_expression      go to state 85
    conditional_expression     go to state 86
    assignment_expression      go to state 160
    statement                  go to state 192
    expression_statement       go to state 163
    compound_statement         go to state 164
    conditional_statement      go to state 165
    jump_statement             go to state 166
    declaration                go to state 167
    declaration_specifiers     go to state 168
    type_specifier             go to state 14
    enum_specifier             go to state 15


State 192

   68 conditional_statement: IF '(' expression ')' statement ELSE statement .

    $default  reduce using rule 68 (conditional_statement)
